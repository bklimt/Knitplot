// Generated by CoffeeScript 1.3.3
(function() {
  var ChartParser, ErrorView, Knitplot, Library, NotificationView, Pattern, PatternEditView, PatternListView, Router, drawCircle, drawGraphic, drawLine, drawRectangle, drawShape, makeGraphic, scaleAndTranslate,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Library = {
    "a": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#40e0d0",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "bp": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#bebebe",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          circle: {
            center: [0.50, 0.50],
            radius: 0.30
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "ap": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#40e0d0",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          circle: {
            center: [0.50, 0.50],
            radius: 0.30
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "error": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ff0000",
            stroke: "#ff0000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "p": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#808080",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "ns": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k3tog": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.80, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.50, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k2tog": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.80, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "sk2p": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.50, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "ssk": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "cdd": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.50, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.20, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "yo": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          circle: {
            center: [0.50, 0.50],
            radius: 0.30
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "t#l": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[0.00, 0.00], [0.00, 1.00], [0.33, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[1.00, 0.00], [0.67, 0.00], [1.00, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "t#r": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[0.00, 0.00], [0.00, 1.00], [0.33, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[1.00, 0.00], [0.67, 1.00], [1.00, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "c#l": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.00, 0.00],
            point2: [0.50, 1.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.00],
            point2: [1.00, 1.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "c#r": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.00, 1.00],
            point2: [0.50, 0.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 1.00],
            point2: [1.00, 0.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "b": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          spline: [[0.30, 0.80], [0.70, 0.40], [0.50, 0.10], [0.30, 0.40], [0.70, 0.80]],
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "tssk": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.10, 0.80],
            point2: [0.50, 0.20]
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          spline: [[0.60, 0.80], [0.90, 0.40], [0.75, 0.10], [0.60, 0.40], [0.90, 0.80]],
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k2togtbl": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.90, 0.80],
            point2: [0.50, 0.20]
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          spline: [[0.10, 0.80], [0.40, 0.40], [0.25, 0.10], [0.10, 0.40], [0.40, 0.80]],
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "p2togtbl": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.60],
            point2: [0.40, 0.60]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "p2tog": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.60, 0.60],
            point2: [0.80, 0.60]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.80, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "mil": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.50, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    }
  };

  ChartParser = (function() {

    function ChartParser() {
      this._parseChart = __bind(this._parseChart, this);

      this._parseRow = __bind(this._parseRow, this);

      this._parseAction = __bind(this._parseAction, this);

      this._eatWhitespace = __bind(this._eatWhitespace, this);

      this._addMessage = __bind(this._addMessage, this);

      this.parse = __bind(this.parse, this);

    }

    ChartParser.prototype.parse = function(text) {
      var chart;
      this.text = text;
      this.line = 0;
      this.lineStart = 0;
      this.tokenLength = 1;
      this.offset = 0;
      this.warnings = [];
      this.errors = [];
      chart = this._parseChart();
      return {
        chart: chart,
        errors: this.errors,
        warnings: this.warnings
      };
    };

    ChartParser.prototype._addMessage = function(list, message) {
      return list.push({
        message: message,
        offset: this.offset - this.tokenLength,
        line: this.line + 1,
        column: ((this.offset - this.tokenLength) - this.lineStart) + 1,
        length: this.tokenLength
      });
    };

    ChartParser.prototype._eatWhitespace = function() {
      var _results;
      this.tokenLength = 0;
      _results = [];
      while (this.text[this.offset] && /[ \t\r]/.test(this.text[this.offset])) {
        _results.push(this.offset++);
      }
      return _results;
    };

    ChartParser.prototype._parseAction = function() {
      var action, defaults, match, number, start, text, _ref;
      this._eatWhitespace();
      start = this.offset;
      this.tokenLength = 0;
      while (this.text[this.offset] && !/[, \t\r\n]/.test(this.text[this.offset])) {
        ++this.offset;
        ++this.tokenLength;
      }
      if (this.tokenLength === 0) {
        if ((!this.text[this.offset]) || /\r\n/.test(this.text[this.offset])) {
          return null;
        } else {
          this._addMessage(this.warnings, "Missing action.");
          return null;
        }
      }
      text = this.text.slice(start, (start + this.tokenLength - 1) + 1 || 9e9);
      action = {
        action: text,
        width: 1,
        textOffset: this.offset - this.tokenLength,
        textLength: this.tokenLength
      };
      _ref = /^(.*[^0-9])([0-9]*)$/.exec(text), match = _ref[0], text = _ref[1], number = _ref[2];
      action.action = text;
      if (number) {
        action.repetitions = parseInt(number);
      }
      defaults = {
        width: 1,
        repetitions: 1
      };
      if (Library[text]) {
        action = _.extend(defaults, Library[text], action);
      } else {
        this._addMessage(this.errors, "Unknown action type: \"" + text + "\".");
        action = _.extend(defaults, Library.error, action, {
          action: "error"
        });
      }
      return action;
    };

    ChartParser.prototype._parseRow = function() {
      var action, row, start, token;
      row = [];
      this._eatWhitespace();
      if ((!this.text[this.offset]) || this.text[this.offset] === "\n") {
        return row;
      }
      action = this._parseAction();
      if (action) {
        row.push(action);
      }
      this._eatWhitespace();
      while (!((!this.text[this.offset]) || this.text[this.offset] === "\n")) {
        if (this.text[this.offset] === ",") {
          ++this.offset;
          action = this._parseAction();
          if (action) {
            row.push(action);
          }
          this._eatWhitespace();
        } else {
          start = this.offset;
          while (!((!this.text[this.offset]) || /[, \t\r\n]/.test(this.text[this.offset]))) {
            ++this.offset;
            ++this.tokenLength;
          }
          token = this.text.slice(start, (start + this.tokenLength - 1) + 1 || 9e9);
          this._addMessage(this.errors, "Stray text: \"" + token + "\".");
        }
      }
      return row;
    };

    ChartParser.prototype._parseChart = function() {
      var chart;
      this._eatWhitespace();
      chart = [];
      while (this.text[this.offset] && this.text[this.offset] === "\n") {
        ++this.offset;
        this._eatWhitespace();
      }
      if (!this.text[this.offset]) {
        return chart;
      }
      chart.push(this._parseRow());
      this._eatWhitespace();
      while (this.text[this.offset]) {
        if (this.text[this.offset] === "\n") {
          ++this.offset;
          ++this.line;
          this.lineStart = this.offset;
          this._eatWhitespace();
          if (!this.text[this.offset]) {
            return chart;
          }
          chart.push(this._parseRow());
          this._eatWhitespace();
        } else {
          this._addMessage(this.errors, "Stray text after row.");
          ++this.offset;
        }
      }
      return chart;
    };

    return ChartParser;

  })();

  Pattern = (function(_super) {

    __extends(Pattern, _super);

    function Pattern() {
      return Pattern.__super__.constructor.apply(this, arguments);
    }

    Pattern.prototype.className = "Pattern";

    return Pattern;

  })(Parse.Object);

  NotificationView = (function(_super) {

    __extends(NotificationView, _super);

    function NotificationView() {
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return NotificationView.__super__.constructor.apply(this, arguments);
    }

    NotificationView.prototype.className = "success";

    NotificationView.prototype.initialize = function() {
      return this.render();
    };

    NotificationView.prototype.render = function() {
      var _ref,
        _this = this;
      $(this.el).html((_ref = this.options.message) != null ? _ref : "Success!");
      $(this.el).hide();
      $("#notification").html(this.el);
      $(this.el).slideDown();
      $.doTimeout(5000, function() {
        $(_this.el).slideUp();
        return $.doTimeout(2000, function() {
          return $(_this.el).remove();
        });
      });
      return this.delegateEvents();
    };

    return NotificationView;

  })(Parse.View);

  ErrorView = (function(_super) {

    __extends(ErrorView, _super);

    function ErrorView() {
      return ErrorView.__super__.constructor.apply(this, arguments);
    }

    ErrorView.prototype.className = "error";

    return ErrorView;

  })(NotificationView);

  drawLine = function(canvas, shape) {
    var line;
    line = canvas.path(("M" + shape.line.point1[0] + "," + shape.line.point1[1]) + ("L" + shape.line.point2[0] + "," + shape.line.point2[1]));
    return line.attr(shape.style);
  };

  drawRectangle = function(canvas, shape) {
    var rect;
    rect = canvas.rect(shape.rectangle.topLeft[0], shape.rectangle.topLeft[1], shape.rectangle.width, shape.rectangle.height);
    return rect.attr(shape.style);
  };

  drawCircle = function(canvas, shape) {
    var circle;
    circle = canvas.circle(shape.circle.center[0], shape.circle.center[1], shape.circle.radius);
    return circle.attr(shape.style);
  };

  drawShape = function(canvas, shape) {
    if (shape.line) {
      return drawLine(canvas, shape);
    } else if (shape.rectangle) {
      return drawRectangle(canvas, shape);
    } else if (shape.circle) {
      return drawCircle(canvas, shape);
    } else {
      return console.warn(shape);
    }
  };

  drawGraphic = function(canvas, graphic) {
    var shape, _i, _len, _ref, _results;
    canvas.clear();
    _ref = graphic.shapes;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      shape = _ref[_i];
      _results.push(drawShape(canvas, shape));
    }
    return _results;
  };

  scaleAndTranslate = function(shape, x, y, width, height) {
    if (shape.line) {
      return {
        line: {
          point1: [shape.line.point1[0] * width + x, shape.line.point1[1] * height + y],
          point2: [shape.line.point2[0] * width + x, shape.line.point2[1] * height + y]
        }
      };
    } else if (shape.rectangle) {
      return {
        rectangle: {
          topLeft: [shape.rectangle.topLeft[0] * width + x, shape.rectangle.topLeft[1] * height + y],
          width: shape.rectangle.width * width,
          height: shape.rectangle.height * height
        }
      };
    } else if (shape.circle) {
      return {
        circle: {
          center: [shape.circle.center[0] * width + x, shape.circle.center[1] * height + y],
          radius: Math.min(shape.circle.radius * width, shape.circle.radius * height)
        }
      };
    } else {
      return console.warn(shape);
    }
  };

  makeGraphic = function(chart, maxWidth, maxHeight) {
    var action, column, columnWidth, columns, graphic, height, newShape, newShapeHeight, newShapeWidth, newShapeX, newShapeY, rep, row, rowHeight, rowIndex, rows, shape, width, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1;
    columns = 1;
    for (_i = 0, _len = chart.length; _i < _len; _i++) {
      row = chart[_i];
      column = 0;
      for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
        action = row[_j];
        column = column + (action.width * action.repetitions);
      }
      if (column > columns) {
        columns = column;
      }
    }
    rows = chart.length;
    width = maxWidth;
    columnWidth = width / columns;
    rowHeight = columnWidth * 0.75;
    height = rowHeight * rows;
    if (height > maxHeight) {
      height = maxHeight;
      rowHeight = height / rows;
      columnWidth = rowHeight / 0.75;
      width = columnWidth * columns;
    }
    graphic = {
      width: width,
      height: height,
      shapes: []
    };
    for (rowIndex = _k = 0, _len2 = chart.length; _k < _len2; rowIndex = ++_k) {
      row = chart[rowIndex];
      column = 0;
      for (_l = 0, _len3 = row.length; _l < _len3; _l++) {
        action = row[_l];
        for (rep = _m = 1, _ref = action.repetitions; 1 <= _ref ? _m <= _ref : _m >= _ref; rep = 1 <= _ref ? ++_m : --_m) {
          _ref1 = action.graphic;
          for (_n = 0, _len4 = _ref1.length; _n < _len4; _n++) {
            shape = _ref1[_n];
            newShape = _.clone(shape);
            newShape.textOffset = action.textOffset;
            newShape.textLength = action.textLength;
            newShapeX = (columns - (column + action.width)) * columnWidth;
            newShapeY = (rows - (rowIndex + 1)) * rowHeight;
            newShapeWidth = action.width * columnWidth;
            newShapeHeight = rowHeight;
            newShape = scaleAndTranslate(newShape, newShapeX, newShapeY, newShapeWidth, newShapeHeight);
            graphic.shapes.push(newShape);
          }
          column = column + action.width;
        }
      }
    }
    return graphic;
  };

  PatternEditView = (function(_super) {

    __extends(PatternEditView, _super);

    function PatternEditView() {
      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);

      this.save = __bind(this.save, this);

      this.initialize = __bind(this.initialize, this);
      return PatternEditView.__super__.constructor.apply(this, arguments);
    }

    PatternEditView.prototype.events = {
      "submit form": "save",
      "keypress textarea": "update"
    };

    PatternEditView.prototype.initialize = function() {
      this.parser = new ChartParser();
      this.model.bind("change", this.render);
      return this.render();
    };

    PatternEditView.prototype.save = function() {
      var _this = this;
      this.model.save({
        title: this.$('[name=title]').val(),
        text: this.$('[name=text]').val()
      }, {
        success: function() {
          new NotificationView({
            message: "Saved!"
          });
          return Backbone.history.navigate("pattern/" + _this.model.id);
        },
        error: function() {
          return new ErrorView({
            message: "Unable to save."
          });
        }
      });
      return false;
    };

    PatternEditView.prototype.update = function() {
      var chart, graphic, parseResults, text;
      text = this.$('[name=text]').val();
      parseResults = this.parser.parse(text);
      chart = parseResults.chart;
      graphic = makeGraphic(chart, 400, 400);
      return drawGraphic(this.canvas, graphic);
    };

    PatternEditView.prototype.render = function() {
      var div, template;
      template = $("#pattern-template").html();
      $(this.el).html(_.template(template)({
        model: this.model
      }));
      $("#app").html(this.el);
      this.$("[name=title]").val(this.model.get("title"));
      this.$("[name=text]").val(this.model.get("text"));
      div = this.$('[name=chart]');
      this.canvas = new Raphael(div.get(0));
      return this.delegateEvents();
    };

    return PatternEditView;

  })(Parse.View);

  PatternListView = (function(_super) {

    __extends(PatternListView, _super);

    function PatternListView() {
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return PatternListView.__super__.constructor.apply(this, arguments);
    }

    PatternListView.prototype.initialize = function() {
      this.start = this.options.start;
      return this.render();
    };

    PatternListView.prototype.render = function() {
      var template;
      template = $("#pattern-list-template").html();
      $(this.el).html(_.template(template)({
        collection: this.collection.first(10),
        start: this.start,
        previous: this.start - 10,
        next: this.collection.size() > 10 ? this.start + 10 : 0
      }));
      $("#app").html(this.el);
      return this.delegateEvents();
    };

    return PatternListView;

  })(Parse.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      this.listPatterns = __bind(this.listPatterns, this);

      this.editPattern = __bind(this.editPattern, this);

      this.newPattern = __bind(this.newPattern, this);
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "listPatterns",
      "new": "newPattern",
      "pattern/:id": "editPattern",
      "patterns/:start": "listPatterns"
    };

    Router.prototype.newPattern = function() {
      return new PatternEditView({
        model: new Pattern()
      });
    };

    Router.prototype.editPattern = function(id) {
      var pattern,
        _this = this;
      pattern = new Pattern({
        objectId: id
      });
      return pattern.fetch({
        success: function() {
          return new PatternEditView({
            model: pattern
          });
        },
        error: function(pattern, error) {
          new Error({
            message: "Count not find the pattern."
          });
          return window.location.hash = "#";
        }
      });
    };

    Router.prototype.listPatterns = function(start) {
      var patterns, query,
        _this = this;
      if (start == null) {
        start = 0;
      }
      query = new Parse.Query(Pattern);
      query.descending("updatedAt", "createdAt").skip(start).limit(11);
      patterns = query.collection();
      return patterns.fetch({
        success: function() {
          return new PatternListView({
            collection: patterns,
            start: parseInt(start)
          });
        },
        error: function(patterns, error) {
          return new Error({
            message: "Unable to load patterns."
          });
        }
      });
    };

    return Router;

  })(Backbone.Router);

  Knitplot = {
    init: function() {
      Parse.initialize("732uFxOqiBozGHcv6BUyEZrpQC0oIbmTbi4UJuK2", "JB48tpHfZ39NTwrRuQIoqq7GQzpdxLonrjpsj67L");
      new Router();
      return Backbone.history.start();
    }
  };

  window.App = Knitplot;

}).call(this);
