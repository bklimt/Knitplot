// Generated by CoffeeScript 1.3.3
(function() {
  var App, ErrorView, NotificationView, Pattern, PatternEditView, PatternListView, Router;

  Pattern = Parse.Object.extend("Pattern");

  NotificationView = Parse.View.extend({
    className: "success",
    initialize: function() {
      _.bindAll(this, "render");
      return this.render();
    },
    render: function() {
      var _ref,
        _this = this;
      $(this.el).html((_ref = this.options.message) != null ? _ref : "Success!");
      $(this.el).hide();
      $("#notification").html(this.el);
      $(this.el).slideDown();
      $.doTimeout(5000, function() {
        $(_this.el).slideUp();
        return $.doTimeout(2000, function() {
          return $(_this.el).remove();
        });
      });
      return this;
    }
  });

  ErrorView = NotificationView.extend({
    className: "error"
  });

  PatternEditView = Parse.View.extend({
    events: {
      "submit form": "save"
    },
    initialize: function() {
      _.bindAll(this, "render");
      this.model.bind("change", this.render);
      return this.render();
    },
    save: function() {
      this.model.set({
        title: this.$('[name=title]').val(),
        text: this.$('[name=text]').val()
      });
      this.model.save({
        success: function() {
          new NotificationView({
            message: "Saved!"
          });
          return Backbone.history.saveLocation("documents/" + this.model.id);
        },
        error: function() {
          return new ErrorView({
            message: "Unable to save."
          });
        }
      });
      return false;
    },
    render: function() {
      var template;
      template = $("#pattern-template").html();
      $(this.el).html(_.template(template)({
        model: this.model
      }));
      $("#app").html(this.el);
      this.$("[name=title]").val(this.model.get("title"));
      this.$("[name=text]").val(this.model.get("text"));
      return this.delegateEvents();
    }
  });

  PatternListView = Parse.View.extend({
    initialize: function() {
      _.bindAll(this, "render");
      return this.render();
    },
    render: function() {
      var template;
      template = $("#pattern-list-template").html();
      $(this.el).html(_.template(template)({
        collection: this.collection
      }));
      $("#app").html(this.el);
      return this.delegateEvents();
    }
  });

  Router = Backbone.Router.extend({
    routes: {
      "": "listPatterns",
      "new": "newPattern",
      "patterns/:id": "editPattern"
    },
    newPattern: function() {
      return new PatternEditView({
        model: new Pattern()
      });
    },
    editPattern: function(id) {
      var pattern;
      pattern = new Pattern({
        objectId: id
      });
      return pattern.fetch({
        success: function() {
          return new PatternEditView({
            model: pattern
          });
        },
        error: function(pattern, error) {
          new Error({
            message: "Count not find the pattern."
          });
          return window.location.hash = "#";
        }
      });
    },
    listPatterns: function() {
      var patterns, query;
      query = new Parse.Query(Pattern);
      query.descending("createdAt");
      query.limit(10);
      patterns = query.collection();
      return patterns.fetch({
        success: function() {
          return new PatternListView({
            collection: patterns
          });
        },
        error: function(patterns, error) {
          return new Error({
            message: "Unable to load patterns."
          });
        }
      });
    }
  });

  App = {
    init: function() {
      Parse.initialize("732uFxOqiBozGHcv6BUyEZrpQC0oIbmTbi4UJuK2", "JB48tpHfZ39NTwrRuQIoqq7GQzpdxLonrjpsj67L");
      new Router();
      return Backbone.history.start();
    }
  };

  window.App = App;

}).call(this);
