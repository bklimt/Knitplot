// Generated by CoffeeScript 1.3.3
(function() {
  var AboutDialogView, AboutView, Chart, ChartEditView, ChartGraphicView, ChartListView, ChartLoadingView, ChartParser, ChartTextView, ChartTransient, ConfirmationView, ErrorView, Graphic, Knitplot, Library, LibraryView, LogInView, LoggedInView, LoggedOutView, NeedToSignUpView, NotificationView, ParseErrorsView, Router, SVGPreviewView, SignUpView, SuccessView, UserView, containsPoint, cursorColor, drawCircle, drawLine, drawPolygon, drawRectangle, drawShape, drawSpline, isSelected, scaleAndTranslate, scaleAndTranslatePoint, selectedColor, svgCircle, svgLine, svgPolygon, svgRectangle, svgShape, svgSpline, svgStyle,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      this.editChart = __bind(this.editChart, this);

      this.newChart = __bind(this.newChart, this);
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "newChart",
      ":id": "editChart"
    };

    Router.prototype.newChart = function() {
      return knitplot.defaultChart();
    };

    Router.prototype.editChart = function(id) {
      return knitplot.editChart(id);
    };

    return Router;

  })(Backbone.Router);

  Knitplot = (function(_super) {

    __extends(Knitplot, _super);

    function Knitplot() {
      this.confirmUnloadMessage = __bind(this.confirmUnloadMessage, this);

      this.confirmUnload = __bind(this.confirmUnload, this);

      this.onChangeChart = __bind(this.onChangeChart, this);
      return Knitplot.__super__.constructor.apply(this, arguments);
    }

    Knitplot.prototype.initialize = function() {
      var query,
        _this = this;
      Parse.initialize("732uFxOqiBozGHcv6BUyEZrpQC0oIbmTbi4UJuK2", "JB48tpHfZ39NTwrRuQIoqq7GQzpdxLonrjpsj67L");
      $(window).bind('beforeunload', this.confirmUnloadMessage);
      this.set("loading", true);
      this.on("change:chart", this.onChangeChart);
      query = new Parse.Query(Library);
      return query.find({
        success: function(results) {
          _this.set({
            loading: false,
            libraries: results,
            defaultLibrary: results[0]
          });
          new AboutView();
          new UserView();
          new ChartListView();
          new ChartEditView();
          new Router();
          return Backbone.history.start();
        },
        error: function(error) {
          return console.log("Unable to load library. Error " + error.code + ": " + error.message);
        }
      });
    };

    Knitplot.prototype.onChangeChart = function() {
      var _ref;
      if ((_ref = this.get("chart")) != null ? _ref.id : void 0) {
        return Backbone.history.navigate("#" + (this.get("chart").id), {
          replace: true
        });
      } else {
        return Backbone.history.navigate("", {
          replace: true
        });
      }
    };

    Knitplot.prototype.defaultChart = function(force) {
      var query, _ref,
        _this = this;
      if ((!force) && ((_ref = this.get("chart")) != null ? _ref.dirty() : void 0)) {
        this.confirmUnload({
          yes: function() {
            return _this.defaultChart(true);
          }
        });
        return;
      }
      this.unset("chart");
      query = new Parse.Query(Chart);
      query.equalTo("creator", Parse.User.current());
      query.descending("updatedAt", "createdAt").skip(this.start).limit(1);
      query.include("library");
      return query.find({
        success: function(results) {
          if (results.length > 0) {
            return _this.set("chart", results[0]);
          } else {
            return _this.newChart(true);
          }
        },
        error: function(error) {
          return new ErrorNotificationView({
            message: "Unable to load chart. Error " + error.code + ": " + error.message + "."
          });
        }
      });
    };

    Knitplot.prototype.newChart = function(force) {
      var _ref,
        _this = this;
      if ((!force) && ((_ref = this.get("chart")) != null ? _ref.dirty() : void 0)) {
        this.confirmUnload({
          yes: function() {
            return _this.newChart(true);
          }
        });
        return;
      }
      return this.set("chart", new Chart({
        title: "Untitled",
        text: "k2,p3\nyo4,k2tog",
        library: this.get("defaultLibrary")
      }));
    };

    Knitplot.prototype.editChart = function(id, force) {
      var chart, _ref,
        _this = this;
      if ((!force) && ((_ref = this.get("chart")) != null ? _ref.dirty() : void 0)) {
        this.confirmUnload({
          yes: function() {
            return _this.editChart(id, true);
          }
        });
        return;
      }
      this.unset("chart");
      if (id === "new") {
        return this.newChart();
      }
      chart = new Chart({
        objectId: id
      });
      return chart.fetch({
        success: function() {
          return chart.get("library").fetch({
            success: function() {
              return _this.set("chart", chart);
            },
            error: function(library, error) {
              new ErrorView({
                message: "Unable to load library for chart."
              });
              return window.location.hash = "#";
            }
          });
        },
        error: function(chart, error) {
          new ErrorView({
            message: "Unable to load chart."
          });
          return window.location.hash = "#";
        }
      });
    };

    Knitplot.prototype.logOut = function(force) {
      var _ref,
        _this = this;
      if ((!force) && ((_ref = this.get("chart")) != null ? _ref.dirty() : void 0)) {
        this.confirmUnload({
          yes: function() {
            return _this.logOut(true);
          }
        });
        return;
      }
      Parse.User.logOut();
      knitplot.set("user", Parse.User.current());
      return this.newChart(true);
    };

    Knitplot.prototype.confirmUnload = function(options) {
      var message;
      message = this.confirmUnloadMessage();
      if (message) {
        return new ConfirmationView({
          message: "Are you sure you want to leave this page?\n\n" + message,
          yes: options.yes,
          no: options.no
        });
      } else {
        if (options.yes) {
          return options.yes();
        }
      }
    };

    Knitplot.prototype.confirmUnloadMessage = function() {
      var _ref;
      if ((_ref = this.get("chart")) != null ? _ref.dirty() : void 0) {
        return "Your chart has not been saved.";
      }
    };

    return Knitplot;

  })(Backbone.Model);

  window.Knitplot = Knitplot;

  ChartTransient = (function(_super) {

    __extends(ChartTransient, _super);

    function ChartTransient() {
      return ChartTransient.__super__.constructor.apply(this, arguments);
    }

    return ChartTransient;

  })(Backbone.Model);

  Chart = (function(_super) {

    __extends(Chart, _super);

    function Chart() {
      return Chart.__super__.constructor.apply(this, arguments);
    }

    Chart.prototype.className = "Chart";

    Chart.prototype.edit = function() {
      this.transient = new ChartTransient;
      return new ChartParser(this);
    };

    return Chart;

  })(Parse.Object);

  ChartParser = (function() {

    function ChartParser(chart) {
      this.chart = chart;
      this.onChangeLibrary = __bind(this.onChangeLibrary, this);

      this.onChangeText = __bind(this.onChangeText, this);

      this.chart.on("change:text", this.onChangeText);
      this.chart.on("change:library", this.onChangeLibrary);
      this.onChangeText();
    }

    ChartParser.prototype.onChangeText = function() {
      return this._parse();
    };

    ChartParser.prototype.onChangeLibrary = function() {
      return this._parse();
    };

    ChartParser.prototype._parse = function() {
      var actions;
      this.text = this.chart.get("text");
      this.line = 0;
      this.lineStart = 0;
      this.tokenLength = 1;
      this.offset = 0;
      this.warnings = [];
      this.errors = [];
      actions = this._parseChart();
      return this.chart.transient.set({
        actions: actions,
        errors: this.errors,
        warnings: this.warnings
      });
    };

    ChartParser.prototype._addMessage = function(list, message) {
      return list.push({
        message: message,
        offset: this.offset - this.tokenLength,
        line: this.line + 1,
        column: ((this.offset - this.tokenLength) - this.lineStart) + 1,
        length: this.tokenLength
      });
    };

    ChartParser.prototype._eatWhitespace = function() {
      var _results;
      this.tokenLength = 0;
      _results = [];
      while (this.text[this.offset] && /[ \t\r]/.test(this.text[this.offset])) {
        _results.push(this.offset++);
      }
      return _results;
    };

    ChartParser.prototype._parseAction = function() {
      var action, altText, defaults, found, library, match, number, prefix, start, suffix, text, _ref, _ref1;
      library = this.chart.get("library").get("data");
      this._eatWhitespace();
      start = this.offset;
      this.tokenLength = 0;
      while (this.text[this.offset] && !/[, \t\r\n]/.test(this.text[this.offset])) {
        ++this.offset;
        ++this.tokenLength;
      }
      if (this.tokenLength === 0) {
        if ((!this.text[this.offset]) || /\r\n/.test(this.text[this.offset])) {
          return null;
        } else {
          this._addMessage(this.warnings, "Missing action.");
          return null;
        }
      }
      text = this.text.slice(start, start + this.tokenLength);
      action = {
        action: text,
        width: 1,
        textRow: this.line,
        textColumn: (this.offset - this.tokenLength) - this.lineStart,
        textOffset: this.offset - this.tokenLength,
        textLength: this.tokenLength
      };
      _ref = /^(.*[^0-9])([0-9]*)$/.exec(text), match = _ref[0], text = _ref[1], number = _ref[2];
      action.action = text;
      if (number) {
        action.repetitions = parseInt(number);
      }
      defaults = {
        width: 1,
        repetitions: 1
      };
      found = false;
      if (library[text]) {
        action = _.extend(defaults, library[text], action);
        found = true;
      } else {
        match = /^([^0-9]*)([0-9]*)([^0-9]*)$/.exec(text);
        if (match) {
          _ref1 = match, match = _ref1[0], prefix = _ref1[1], number = _ref1[2], suffix = _ref1[3];
          altText = "" + prefix + "#" + suffix;
          if (match && library[altText]) {
            action = _.extend(defaults, library[altText], action);
            action.action = altText;
            action.width = action.width * parseInt(number);
            found = true;
          }
        }
      }
      if (!found) {
        this._addMessage(this.errors, "Unknown action type: \"" + text + "\".");
        action = _.extend(defaults, library.error, action, {
          action: "error"
        });
      }
      return action;
    };

    ChartParser.prototype._parseRow = function() {
      var action, row, start, token;
      row = [];
      this._eatWhitespace();
      if ((!this.text[this.offset]) || this.text[this.offset] === "\n") {
        return row;
      }
      action = this._parseAction();
      if (action) {
        row.push(action);
      }
      this._eatWhitespace();
      while (!((!this.text[this.offset]) || this.text[this.offset] === "\n")) {
        if (this.text[this.offset] === ",") {
          ++this.offset;
          action = this._parseAction();
          if (action) {
            row.push(action);
          }
          this._eatWhitespace();
        } else {
          start = this.offset;
          while (!((!this.text[this.offset]) || /[, \t\r\n]/.test(this.text[this.offset]))) {
            ++this.offset;
            ++this.tokenLength;
          }
          token = this.text.slice(start, start + this.tokenLength);
          this._addMessage(this.errors, "Stray text: \"" + token + "\".");
          this._eatWhitespace();
        }
      }
      return row;
    };

    ChartParser.prototype._parseChart = function() {
      var chart;
      this._eatWhitespace();
      chart = [];
      while (this.text[this.offset] && this.text[this.offset] === "\n") {
        ++this.offset;
        this._eatWhitespace();
      }
      if (!this.text[this.offset]) {
        return chart;
      }
      chart.push(this._parseRow());
      this._eatWhitespace();
      while (this.text[this.offset]) {
        if (this.text[this.offset] === "\n") {
          ++this.offset;
          ++this.line;
          this.lineStart = this.offset;
          this._eatWhitespace();
          if (!this.text[this.offset]) {
            return chart;
          }
          chart.push(this._parseRow());
          this._eatWhitespace();
        } else {
          this._addMessage(this.errors, "Stray text after row.");
          ++this.offset;
        }
      }
      return chart;
    };

    return ChartParser;

  })();

  window.ChartParser = ChartParser;

  svgStyle = function(style) {
    return ("style=\"fill:" + style.fill + ";") + ("stroke:" + style.stroke + ";") + ("stroke-width:" + style["stroke-width"] + "\"");
  };

  drawLine = function(canvas, shape) {
    var line, path;
    path = ("M" + shape.line.point1[0] + "," + shape.line.point1[1]) + ("L" + shape.line.point2[0] + "," + shape.line.point2[1]);
    line = canvas.path(path);
    return line.attr(shape.style);
  };

  svgLine = function(shape) {
    return ("<line x1=\"" + shape.line.point1[0] + "\" ") + ("y1=\"" + shape.line.point1[1] + "\" ") + ("x2=\"" + shape.line.point2[0] + "\" ") + ("y2=\"" + shape.line.point2[1] + "\" ") + ("" + (svgStyle(shape.style)) + " />\n");
  };

  drawRectangle = function(canvas, shape) {
    var rect;
    rect = canvas.rect(shape.rectangle.topLeft[0], shape.rectangle.topLeft[1], shape.rectangle.width, shape.rectangle.height);
    return rect.attr(shape.style);
  };

  svgRectangle = function(shape) {
    return ("<rect x=\"" + shape.rectangle.topLeft[0] + "\" ") + ("y=\"" + shape.rectangle.topLeft[1] + "\" ") + ("width=\"" + shape.rectangle.width + "\" ") + ("height=\"" + shape.rectangle.height + "\" ") + ("" + (svgStyle(shape.style)) + " />\n");
  };

  drawCircle = function(canvas, shape) {
    var circle;
    circle = canvas.circle(shape.circle.center[0], shape.circle.center[1], shape.circle.radius);
    return circle.attr(shape.style);
  };

  svgCircle = function(shape) {
    return ("<circle cx=\"" + shape.circle.center[0] + "\" ") + ("cy=\"" + shape.circle.center[1] + "\" ") + ("r=\"" + shape.circle.radius + "\" ") + ("" + (svgStyle(shape.style)) + " />\n");
  };

  drawPolygon = function(canvas, shape) {
    var path, point, polygon;
    path = ("M" + shape.polygon[0][0] + "," + shape.polygon[0][1]) + ((function() {
      var _i, _len, _ref, _results;
      _ref = shape.polygon.slice(1);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push("L" + point[0] + "," + point[1]);
      }
      return _results;
    })()).join("");
    polygon = canvas.path(path);
    return polygon.attr(shape.style);
  };

  svgPolygon = function(shape) {
    var point;
    return "<polygon points=\"" + ((function() {
      var _i, _len, _ref, _results;
      _ref = shape.polygon;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push("" + point[0] + "," + point[1]);
      }
      return _results;
    })()).join(" ") + "\" " + ("" + (svgStyle(shape.style)) + " />\n");
  };

  drawSpline = function(canvas, shape) {
    var c, current, next, path, spline;
    current = shape.spline[0];
    next = shape.spline[1];
    c = [(current[0] + next[0]) / 2, (current[1] + next[1]) / 2];
    path = "M" + current[0] + "," + current[1] + "L" + c[0] + "," + c[1];
    _.each(shape.spline.slice(2), function(point) {
      current = next;
      next = point;
      c = [(current[0] + next[0]) / 2, (current[1] + next[1]) / 2];
      return path = "" + path + " Q" + current[0] + "," + current[1] + " " + c[0] + "," + c[1];
    });
    path = "" + path + " L" + next[0] + "," + next[1];
    spline = canvas.path(path);
    return spline.attr(shape.style);
  };

  svgSpline = function(shape) {
    var c, current, next, path;
    current = shape.spline[0];
    next = shape.spline[1];
    c = [(current[0] + next[0]) / 2, (current[1] + next[1]) / 2];
    path = "M" + current[0] + "," + current[1] + "L" + c[0] + "," + c[1];
    _.each(shape.spline.slice(2), function(point) {
      current = next;
      next = point;
      c = [(current[0] + next[0]) / 2, (current[1] + next[1]) / 2];
      return path = "" + path + " Q" + current[0] + "," + current[1] + " " + c[0] + "," + c[1];
    });
    path = "" + path + " L" + next[0] + "," + next[1];
    return "<path d=\"" + path + "\" " + (svgStyle(shape.style)) + " />\n";
  };

  cursorColor = function(color) {
    var b, g, r;
    r = Math.round(parseInt(color.substring(1, 3), 16) * 0.25);
    g = Math.round(parseInt(color.substring(3, 5), 16) * 1.00);
    b = Math.round(parseInt(color.substring(5, 7), 16) * 0.25);
    return "#" + ("0" + r.toString(16)).slice(-2) + ("0" + g.toString(16)).slice(-2) + ("0" + b.toString(16)).slice(-2);
  };

  selectedColor = function(color) {
    var b, g, r;
    r = Math.round(parseInt(color.substring(1, 3), 16) * 0.75);
    g = Math.round(parseInt(color.substring(3, 5), 16) * 0.75);
    b = Math.round(parseInt(color.substring(5, 7), 16) * 1.00);
    return "#" + ("0" + r.toString(16)).slice(-2) + ("0" + g.toString(16)).slice(-2) + ("0" + b.toString(16)).slice(-2);
  };

  isSelected = function(action, selection) {
    var after, before;
    if (!selection) {
      return false;
    }
    if ((selection.end.row < action.textRow) || ((selection.end.row === action.textRow) && (selection.end.column < action.textColumn))) {
      return false;
    }
    if ((selection.start.row > action.textRow) || ((selection.start.row === action.textRow) && (selection.start.column > (action.textColumn + action.textLength)))) {
      return false;
    }
    before = (selection.start.row < action.textRow) || ((selection.start.row === action.textRow) && (selection.start.column <= action.textColumn));
    after = (selection.end.row > action.textRow) || ((selection.end.row === action.textRow) && (selection.end.column >= action.textColumn + action.textLength));
    return true;
  };

  drawShape = function(canvas, shape, selection) {
    if (isSelected(shape.action, selection)) {
      shape = _.clone(shape);
      shape.style = _.clone(shape.style);
      if ((selection.start.row === selection.end.row) && (selection.start.column === selection.end.column)) {
        shape.style.fill = cursorColor(shape.style.fill);
      } else {
        shape.style.fill = selectedColor(shape.style.fill);
      }
    }
    if (shape.line) {
      return drawLine(canvas, shape);
    } else if (shape.rectangle) {
      return drawRectangle(canvas, shape);
    } else if (shape.circle) {
      return drawCircle(canvas, shape);
    } else if (shape.polygon) {
      return drawPolygon(canvas, shape);
    } else if (shape.spline) {
      return drawSpline(canvas, shape);
    } else {
      return console.warn(shape);
    }
  };

  svgShape = function(shape) {
    if (shape.line) {
      return svgLine(shape);
    } else if (shape.rectangle) {
      return svgRectangle(shape);
    } else if (shape.circle) {
      return svgCircle(shape);
    } else if (shape.polygon) {
      return svgPolygon(shape);
    } else if (shape.spline) {
      return svgSpline(shape);
    } else {
      return console.warn(shape);
    }
  };

  containsPoint = function(shape, x, y) {
    var bottom, left, right, top;
    if (shape.rectangle) {
      left = shape.rectangle.topLeft[0];
      top = shape.rectangle.topLeft[1];
      right = left + shape.rectangle.width;
      bottom = top + shape.rectangle.height;
      if ((left <= x && x < right) && (top <= y && y < bottom)) {
        return true;
      }
    }
    return false;
  };

  scaleAndTranslatePoint = function(point, x, y, width, height) {
    return [point[0] * width + x, point[1] * height + y];
  };

  scaleAndTranslate = function(shape, x, y, width, height) {
    var point;
    if (shape.line) {
      return {
        line: {
          point1: scaleAndTranslatePoint(shape.line.point1, x, y, width, height),
          point2: scaleAndTranslatePoint(shape.line.point2, x, y, width, height)
        },
        style: shape.style
      };
    } else if (shape.rectangle) {
      return {
        rectangle: {
          topLeft: scaleAndTranslatePoint(shape.rectangle.topLeft, x, y, width, height),
          width: shape.rectangle.width * width,
          height: shape.rectangle.height * height
        },
        style: shape.style
      };
    } else if (shape.circle) {
      return {
        circle: {
          center: scaleAndTranslatePoint(shape.circle.center, x, y, width, height),
          radius: Math.min(shape.circle.radius * width, shape.circle.radius * height)
        },
        style: shape.style
      };
    } else if (shape.polygon) {
      return {
        polygon: (function() {
          var _i, _len, _ref, _results;
          _ref = shape.polygon;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            _results.push(scaleAndTranslatePoint(point, x, y, width, height));
          }
          return _results;
        })(),
        style: shape.style
      };
    } else if (shape.spline) {
      return {
        spline: (function() {
          var _i, _len, _ref, _results;
          _ref = shape.spline;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            _results.push(scaleAndTranslatePoint(point, x, y, width, height));
          }
          return _results;
        })(),
        style: shape.style
      };
    } else {
      console.warn(shape);
      return {};
    }
  };

  Graphic = (function() {

    function Graphic(chart, maxWidth, maxHeight) {
      this.actionAtPoint = __bind(this.actionAtPoint, this);

      this._shapeAtPoint = __bind(this._shapeAtPoint, this);

      var action, column, columnWidth, columns, height, newShape, newShapeHeight, newShapeWidth, newShapeX, newShapeY, rep, row, rowHeight, rowIndex, rows, shape, width, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1;
      maxWidth = maxWidth - 1;
      maxHeight = maxHeight - 1;
      columns = 1;
      for (_i = 0, _len = chart.length; _i < _len; _i++) {
        row = chart[_i];
        column = 0;
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          action = row[_j];
          column = column + (action.width * action.repetitions);
        }
        if (column > columns) {
          columns = column;
        }
      }
      rows = chart.length;
      width = maxWidth;
      columnWidth = Math.floor(width / columns);
      rowHeight = Math.floor(columnWidth * 0.75);
      height = rowHeight * rows;
      if (height > maxHeight) {
        height = maxHeight;
        rowHeight = Math.floor(height / rows);
        columnWidth = Math.floor(rowHeight / 0.75);
        width = columnWidth * columns;
      }
      this.graphic = {
        width: width,
        height: height,
        shapes: []
      };
      for (rowIndex = _k = 0, _len2 = chart.length; _k < _len2; rowIndex = ++_k) {
        row = chart[rowIndex];
        column = 0;
        for (_l = 0, _len3 = row.length; _l < _len3; _l++) {
          action = row[_l];
          for (rep = _m = 1, _ref = action.repetitions; 1 <= _ref ? _m <= _ref : _m >= _ref; rep = 1 <= _ref ? ++_m : --_m) {
            _ref1 = action.graphic;
            for (_n = 0, _len4 = _ref1.length; _n < _len4; _n++) {
              shape = _ref1[_n];
              newShapeX = 1 + (columns - (column + action.width)) * columnWidth;
              newShapeY = 1 + (rows - (rowIndex + 1)) * rowHeight;
              newShapeWidth = action.width * columnWidth;
              newShapeHeight = rowHeight;
              newShape = scaleAndTranslate(shape, newShapeX, newShapeY, newShapeWidth, newShapeHeight);
              newShape.action = action;
              this.graphic.shapes.push(newShape);
            }
            column = column + action.width;
          }
        }
      }
    }

    Graphic.fromAction = function(action, maxWidth, maxHeight) {
      action = _.clone(action);
      action.repetitions || (action.repetitions = 1);
      action.width || (action.width = 1);
      return new Graphic([[action]], maxHeight, maxHeight);
    };

    Graphic.prototype.draw = function(canvas, selection) {
      var shape, _i, _len, _ref, _results;
      canvas.clear();
      _ref = this.graphic.shapes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        _results.push(drawShape(canvas, shape, selection));
      }
      return _results;
    };

    Graphic.prototype.svg = function() {
      var shape, svg, _i, _len, _ref;
      svg = ("<svg width=\"" + this.graphic.width + "\" ") + ("height=\"" + this.graphic.height + "\" ") + "version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n";
      _ref = this.graphic.shapes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        svg = "" + svg + (svgShape(shape));
      }
      return svg = "" + svg + "\n<svg />";
    };

    Graphic.prototype.svgFile = function() {
      return "<?xml version=\"1.0\" standalone=\"no\"?>\n" + "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" " + "\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n" + this.svg();
    };

    Graphic.prototype._shapeAtPoint = function(x, y) {
      var shape, _i, _len, _ref;
      _ref = this.graphic.shapes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        if (containsPoint(shape, x, y)) {
          return shape;
        }
      }
      return void 0;
    };

    Graphic.prototype.actionAtPoint = function(x, y) {
      var _ref;
      return (_ref = this._shapeAtPoint(x, y)) != null ? _ref.action : void 0;
    };

    return Graphic;

  })();

  window.Graphic = Graphic;

  Library = (function(_super) {

    __extends(Library, _super);

    function Library() {
      return Library.__super__.constructor.apply(this, arguments);
    }

    Library.prototype.className = "Library";

    return Library;

  })(Parse.Object);

  NotificationView = (function(_super) {

    __extends(NotificationView, _super);

    function NotificationView() {
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return NotificationView.__super__.constructor.apply(this, arguments);
    }

    NotificationView.prototype.className = "ui-state-highlight ui-corner-all";

    NotificationView.prototype.initialize = function() {
      return this.render();
    };

    NotificationView.prototype.render = function() {
      var notification, _ref,
        _this = this;
      $(this.el).html((_ref = this.options.message) != null ? _ref : "Success!");
      notification = $("#notification");
      notification.html(this.el);
      notification.hide();
      notification.slideDown();
      $.doTimeout(3000, function() {
        notification.slideUp();
        return $.doTimeout(20000, function() {
          return notification.remove();
        });
      });
      return this.delegateEvents();
    };

    return NotificationView;

  })(Parse.View);

  ConfirmationView = (function(_super) {

    __extends(ConfirmationView, _super);

    function ConfirmationView() {
      this.no = __bind(this.no, this);

      this.yes = __bind(this.yes, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return ConfirmationView.__super__.constructor.apply(this, arguments);
    }

    ConfirmationView.prototype.events = {
      "click #yes": "yes",
      "click #no": "no"
    };

    ConfirmationView.prototype.initialize = function() {
      return this.render();
    };

    ConfirmationView.prototype.render = function() {
      var template;
      template = _.template($('#confirmation-template').html());
      $(this.el).html(template({
        message: this.options.message || "Are you sure?"
      }));
      $(this.el).dialog({
        title: this.options.title || "Are you sure?",
        modal: true
      });
      $('#dialog-button-bar #no').button();
      return $('#dialog-button-bar #yes').button();
    };

    ConfirmationView.prototype.yes = function() {
      if (this.options.yes) {
        this.options.yes();
      }
      return $(this.el).remove();
    };

    ConfirmationView.prototype.no = function() {
      if (this.options.no) {
        this.options.no();
      }
      return $(this.el).remove();
    };

    return ConfirmationView;

  })(Parse.View);

  SuccessView = (function(_super) {

    __extends(SuccessView, _super);

    function SuccessView() {
      return SuccessView.__super__.constructor.apply(this, arguments);
    }

    SuccessView.prototype.className = "ui-state-highlight ui-corner-all success";

    return SuccessView;

  })(NotificationView);

  ErrorView = (function(_super) {

    __extends(ErrorView, _super);

    function ErrorView() {
      return ErrorView.__super__.constructor.apply(this, arguments);
    }

    ErrorView.prototype.className = "ui-state-error ui-corner-all error";

    return ErrorView;

  })(NotificationView);

  UserView = (function(_super) {

    __extends(UserView, _super);

    function UserView() {
      this.onChangeUser = __bind(this.onChangeUser, this);
      return UserView.__super__.constructor.apply(this, arguments);
    }

    UserView.prototype.initialize = function() {
      this.render();
      return knitplot.on("change:user", this.onChangeUser);
    };

    UserView.prototype.onChangeUser = function() {
      return this.render();
    };

    UserView.prototype.render = function() {
      if (Parse.User.current()) {
        return new LoggedInView();
      } else {
        return new LoggedOutView();
      }
    };

    return UserView;

  })(Parse.View);

  LoggedInView = (function(_super) {

    __extends(LoggedInView, _super);

    function LoggedInView() {
      this.logOut = __bind(this.logOut, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return LoggedInView.__super__.constructor.apply(this, arguments);
    }

    LoggedInView.prototype.events = {
      "click #username": "logOut"
    };

    LoggedInView.prototype.initialize = function() {
      return this.render();
    };

    LoggedInView.prototype.render = function() {
      var template;
      template = _.template($('#logged-in-template').html());
      $(this.el).html(template({
        username: Parse.User.current().get('username')
      }));
      $('#user').html(this.el);
      $('#username').button();
      return this.delegateEvents();
    };

    LoggedInView.prototype.logOut = function() {
      return new ConfirmationView({
        message: "Are you sure you want to log out?",
        yes: function() {
          return knitplot.logOut();
        }
      });
    };

    return LoggedInView;

  })(Parse.View);

  LoggedOutView = (function(_super) {

    __extends(LoggedOutView, _super);

    function LoggedOutView() {
      this.signUp = __bind(this.signUp, this);

      this.logIn = __bind(this.logIn, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return LoggedOutView.__super__.constructor.apply(this, arguments);
    }

    LoggedOutView.prototype.events = {
      "click #login": "logIn",
      "click #signup": "signUp"
    };

    LoggedOutView.prototype.initialize = function() {
      return this.render();
    };

    LoggedOutView.prototype.render = function() {
      var template;
      template = $('#logged-out-template').html();
      $(this.el).html(_.template(template)({}));
      $('#user').html(this.el);
      $('#signup').button();
      $('#login').button();
      return this.delegateEvents();
    };

    LoggedOutView.prototype.logIn = function() {
      return new LogInView();
    };

    LoggedOutView.prototype.signUp = function() {
      return new SignUpView();
    };

    return LoggedOutView;

  })(Parse.View);

  LogInView = (function(_super) {

    __extends(LogInView, _super);

    function LogInView() {
      this.cancel = __bind(this.cancel, this);

      this.logIn = __bind(this.logIn, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return LogInView.__super__.constructor.apply(this, arguments);
    }

    LogInView.prototype.events = {
      "click #login": "logIn",
      "click #cancel": "cancel"
    };

    LogInView.prototype.initialize = function() {
      return this.render();
    };

    LogInView.prototype.render = function() {
      var template;
      template = $('#login-template').html();
      $(this.el).html(template);
      $(this.el).dialog({
        title: "Log in to Knitplot!",
        modal: true
      });
      $('#dialog-button-bar #cancel').button();
      return $('#dialog-button-bar #login').button();
    };

    LogInView.prototype.logIn = function() {
      var _this = this;
      return Parse.User.logIn($('#email').val(), $('#password').val(), {
        success: function() {
          _this.$el.remove();
          return knitplot.set("user", Parse.User.current());
        },
        error: function(user, error) {
          alert(error.message);
          return knitplot.set("user", Parse.User.current());
        }
      });
    };

    LogInView.prototype.cancel = function() {
      return $(this.el).remove();
    };

    return LogInView;

  })(Parse.View);

  NeedToSignUpView = (function(_super) {

    __extends(NeedToSignUpView, _super);

    function NeedToSignUpView() {
      this.okay = __bind(this.okay, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return NeedToSignUpView.__super__.constructor.apply(this, arguments);
    }

    NeedToSignUpView.prototype.events = {
      "click #okay": "okay"
    };

    NeedToSignUpView.prototype.initialize = function() {
      return this.render();
    };

    NeedToSignUpView.prototype.render = function() {
      var template;
      template = $('#need-to-sign-up-template').html();
      $(this.el).html(template);
      $(this.el).dialog({
        title: "Sign up for Knitplot!",
        modal: true
      });
      return $('#dialog-button-bar #okay').button();
    };

    NeedToSignUpView.prototype.okay = function() {
      return $(this.el).remove();
    };

    return NeedToSignUpView;

  })(Parse.View);

  SignUpView = (function(_super) {

    __extends(SignUpView, _super);

    function SignUpView() {
      this.cancel = __bind(this.cancel, this);

      this.signup = __bind(this.signup, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return SignUpView.__super__.constructor.apply(this, arguments);
    }

    SignUpView.prototype.events = {
      "click #signup": "signup",
      "click #cancel": "cancel"
    };

    SignUpView.prototype.initialize = function() {
      return this.render();
    };

    SignUpView.prototype.render = function() {
      var template;
      template = $('#signup-template').html();
      $(this.el).html(template);
      $(this.el).dialog({
        title: "Sign up for Knitplot!",
        modal: true
      });
      $('#dialog-button-bar #cancel').button();
      return $('#dialog-button-bar #signup').button();
    };

    SignUpView.prototype.signup = function() {
      var _this = this;
      return Parse.User.signUp($('#email').val(), $('#password').val(), {
        email: $('#email').val()
      }, {
        success: function() {
          $(_this.el).remove();
          return new LoggedInView();
        },
        error: function(user, error) {
          return alert(error.message);
        }
      });
    };

    SignUpView.prototype.cancel = function() {
      return $(this.el).remove();
    };

    return SignUpView;

  })(Parse.View);

  ChartLoadingView = (function(_super) {

    __extends(ChartLoadingView, _super);

    function ChartLoadingView() {
      return ChartLoadingView.__super__.constructor.apply(this, arguments);
    }

    ChartLoadingView.prototype.initialize = function() {
      return this.render();
    };

    ChartLoadingView.prototype.render = function() {
      return $("#app").html("Loading");
    };

    return ChartLoadingView;

  })(Parse.View);

  ChartEditView = (function(_super) {

    __extends(ChartEditView, _super);

    function ChartEditView() {
      this.render = __bind(this.render, this);

      this.onChangeTitle = __bind(this.onChangeTitle, this);

      this.onKeyUpTitle = __bind(this.onKeyUpTitle, this);

      this.onDeleteButton = __bind(this.onDeleteButton, this);

      this.onSaveButton = __bind(this.onSaveButton, this);

      this.onSVGButton = __bind(this.onSVGButton, this);

      this.onChangeChart = __bind(this.onChangeChart, this);

      this.initialize = __bind(this.initialize, this);
      return ChartEditView.__super__.constructor.apply(this, arguments);
    }

    ChartEditView.prototype.events = {
      "keyup input": "onKeyUpTitle"
    };

    ChartEditView.prototype.initialize = function() {
      knitplot.on("change:chart", this.onChangeChart);
      return this.render();
    };

    ChartEditView.prototype.onChangeChart = function() {
      var chart;
      chart = knitplot.get("chart");
      if (chart) {
        chart.edit();
        if (chart.id) {
          $("#delete").button().show();
        } else {
          $("#delete").button().hide();
        }
      }
      return this.render();
    };

    ChartEditView.prototype.onSVGButton = function() {
      var svg, url;
      svg = $("#chart").html();
      url = "data:image/svg+xml," + encodeURIComponent(svg);
      new SVGPreviewView({
        url: url
      });
      return false;
    };

    ChartEditView.prototype.onSaveButton = function() {
      var _this = this;
      if (!Parse.User.current()) {
        new NeedToSignUpView();
        return false;
      }
      $("#save").button({
        disabled: true
      });
      knitplot.get("chart").save({
        creator: Parse.User.current()
      }, {
        success: function(chart) {
          chart.trigger("save");
          $("#save").button({
            label: "Save",
            disabled: false
          });
          $("#delete").button().show();
          return new SuccessView({
            message: "Saved!"
          });
        },
        error: function() {
          return new ErrorView({
            message: "Unable to save."
          });
        }
      });
      return false;
    };

    ChartEditView.prototype.onDeleteButton = function() {
      var _this = this;
      if (!knitplot.get("chart").id) {
        return;
      }
      new ConfirmationView({
        message: "Are you sure you want to delete this chart?",
        yes: function() {
          return knitplot.get("chart").destroy({
            success: function() {
              knitplot.unset("chart");
              $("#save").button().hide();
              new SuccessView({
                message: "Deleted the chart."
              });
              return setTimeout((function() {
                return knitplot.defaultChart();
              }), 2000);
            },
            error: function() {
              return new ErrorView({
                message: "Failed to delete chart."
              });
            }
          });
        }
      });
      return false;
    };

    ChartEditView.prototype.onKeyUpTitle = function() {
      var title,
        _this = this;
      title = this.$('#title').val();
      if (title !== (knitplot.get("chart").get("title") || "")) {
        return knitplot.get("chart").set({
          title: title
        }, {
          error: function() {
            return new ErrorView({
              message: "Unable to set title."
            });
          }
        });
      }
    };

    ChartEditView.prototype.onChangeTitle = function() {
      var title;
      title = knitplot.get("chart").get("title") || "";
      if (this.titleEdit.val() !== title) {
        return this.titleEdit.val(title);
      }
    };

    ChartEditView.prototype.render = function() {
      var graphic, library, template, text;
      if (!knitplot.get("chart")) {
        new ChartLoadingView();
        return;
      }
      template = $("#chart-template").html();
      $(this.el).html(_.template(template)({
        model: knitplot.get("chart")
      }));
      $("#app").html(this.el);
      $("#save").button().on("click", this.onSaveButton);
      $("#svg").button().on("click", this.onSVGButton);
      $("#delete").button().on("click", this.onDeleteButton);
      if (!knitplot.get("chart").id) {
        $("#delete").button().hide();
      }
      this.titleEdit = this.$("#title");
      this.onChangeTitle();
      library = new LibraryView({
        el: this.$("#library").get(0),
        chart: knitplot.get("chart")
      });
      graphic = new ChartGraphicView({
        el: this.$("#chart").get(0),
        model: knitplot.get("chart")
      });
      text = new ChartTextView({
        el: $("#text").get(0),
        model: knitplot.get("chart")
      });
      graphic.$el.on("mouseup", function() {
        return text.focus();
      });
      new ParseErrorsView({
        model: knitplot.get("chart")
      });
      return this.delegateEvents();
    };

    return ChartEditView;

  })(Parse.View);

  ChartGraphicView = (function(_super) {

    __extends(ChartGraphicView, _super);

    function ChartGraphicView() {
      this.render = __bind(this.render, this);

      this.onCanvasMouseUp = __bind(this.onCanvasMouseUp, this);

      this.onCanvasMouseMove = __bind(this.onCanvasMouseMove, this);

      this.onCanvasMouseDown = __bind(this.onCanvasMouseDown, this);

      this.onChangeSelection = __bind(this.onChangeSelection, this);

      this.onChangeActions = __bind(this.onChangeActions, this);

      this.initialize = __bind(this.initialize, this);
      return ChartGraphicView.__super__.constructor.apply(this, arguments);
    }

    ChartGraphicView.prototype.initialize = function() {
      this.model = this.options.model;
      this.model.transient.on("change:actions", this.onChangeActions);
      this.model.transient.on("change:selection", this.onChangeSelection);
      this.$el.on("mousedown", this.onCanvasMouseDown);
      this.$el.on("mousemove", this.onCanvasMouseMove);
      this.$el.on("mouseup", this.onCanvasMouseUp);
      this.canvas = new Raphael(this.el);
      return this.render();
    };

    ChartGraphicView.prototype.onChangeActions = function() {
      var actions;
      actions = this.model.transient.get("actions");
      if (chart) {
        this.graphic = new Graphic(actions, this.canvas.width, this.canvas.height);
        return this.graphic.draw(this.canvas, this.model.transient.get("selection"));
      }
    };

    ChartGraphicView.prototype.onChangeSelection = function() {
      return this.onChangeActions();
    };

    ChartGraphicView.prototype.onCanvasMouseDown = function(event) {
      var x, y;
      x = event.pageX - this.$el.position().left;
      y = event.pageY - this.$el.position().top;
      this.mouseDownAction = this.graphic.actionAtPoint(x, y);
      if (!this.mouseDownAction) {
        return;
      }
      return this.model.transient.set("selection", {
        start: {
          row: this.mouseDownAction.textRow,
          column: this.mouseDownAction.textColumn
        },
        end: {
          row: this.mouseDownAction.textRow,
          column: this.mouseDownAction.textColumn + this.mouseDownAction.textLength
        }
      });
    };

    ChartGraphicView.prototype.onCanvasMouseMove = function(event) {
      var action, endAction, startAction, x, y;
      if (!this.mouseDownAction) {
        return;
      }
      x = event.pageX - this.$el.position().left;
      y = event.pageY - this.$el.position().top;
      action = this.graphic.actionAtPoint(x, y);
      if (!action) {
        return;
      }
      if (this.mouseDownAction.textOffset < action.textOffset) {
        startAction = this.mouseDownAction;
        endAction = action;
      } else {
        startAction = action;
        endAction = this.mouseDownAction;
      }
      return this.model.transient.set("selection", {
        start: {
          row: startAction.textRow,
          column: startAction.textColumn
        },
        end: {
          row: endAction.textRow,
          column: endAction.textColumn + endAction.textLength
        }
      });
    };

    ChartGraphicView.prototype.onCanvasMouseUp = function(event) {
      return delete this.mouseDownAction;
    };

    ChartGraphicView.prototype.render = function() {
      return this.onChangeActions();
    };

    return ChartGraphicView;

  })(Parse.View);

  ChartListView = (function(_super) {

    __extends(ChartListView, _super);

    function ChartListView() {
      this.fetch = __bind(this.fetch, this);

      this.onClickPrevious = __bind(this.onClickPrevious, this);

      this.onClickNext = __bind(this.onClickNext, this);

      this.onClickNew = __bind(this.onClickNew, this);

      this.onChangeChart = __bind(this.onChangeChart, this);
      return ChartListView.__super__.constructor.apply(this, arguments);
    }

    ChartListView.prototype.initialize = function() {
      this.start = this.start || 0;
      this.query = new Parse.Query(Chart);
      this.charts = this.query.collection();
      this.render();
      this.fetch();
      return knitplot.on("change:chart", this.onChangeChart);
    };

    ChartListView.prototype.onChangeChart = function() {
      var _ref, _ref1;
      knitplot.on("change:user", this.fetch);
      if ((_ref = knitplot.get("chart")) != null) {
        _ref.on("save", this.fetch);
      }
      return (_ref1 = knitplot.get("chart")) != null ? _ref1.on("destroy", this.fetch) : void 0;
    };

    ChartListView.prototype.onClickNew = function() {
      return knitplot.newChart();
    };

    ChartListView.prototype.onClickNext = function() {
      this.start = this.start + 10;
      return this.fetch();
    };

    ChartListView.prototype.onClickPrevious = function() {
      this.start = this.start - 10;
      if (this.start < 0) {
        this.start = 0;
      }
      return this.fetch();
    };

    ChartListView.prototype.fetch = function() {
      var _this = this;
      $('#spinner').show();
      $("#previous").button("disable");
      $("#next").button("disable");
      this.query.equalTo("creator", Parse.User.current());
      this.query.descending("updatedAt", "createdAt").skip(this.start).limit(11);
      return this.charts.fetch({
        success: function() {
          _this.renderList();
          return $('#spinner').hide();
        },
        error: function(charts, error) {
          return new ErrorView({
            message: "Unable to load chart list."
          });
        }
      });
    };

    ChartListView.prototype.renderList = function() {
      this.$el.html(_.template(this.template)({
        collection: this.charts.first(10),
        start: this.start,
        previous: this.start - 10,
        next: this.charts.size() > 10 ? this.start + 10 : 0
      }));
      $("#leftbar").html(this.el);
      $("#new").button().on("click", this.onClickNew);
      $("#next").button().on("click", this.onClickNext);
      return $("#previous").button().on("click", this.onClickPrevious);
    };

    ChartListView.prototype.render = function() {
      this.template = $("#chart-list-template").html();
      return this.renderList();
    };

    return ChartListView;

  })(Parse.View);

  ParseErrorsView = (function(_super) {

    __extends(ParseErrorsView, _super);

    function ParseErrorsView() {
      this.onChangeErrors = __bind(this.onChangeErrors, this);

      this.initialize = __bind(this.initialize, this);
      return ParseErrorsView.__super__.constructor.apply(this, arguments);
    }

    ParseErrorsView.prototype.initialize = function() {
      this.$el = $("#errors");
      this.model = this.options.model;
      this.model.transient.on("change:errors", this.onChangeErrors);
      return this.onChangeErrors();
    };

    ParseErrorsView.prototype.onChangeErrors = function() {
      var lines,
        _this = this;
      if (this.model.transient.get("errors").length === 0) {
        return this.$el.hide();
      } else {
        lines = _.map(this.model.transient.get("errors"), function(error) {
          return "Line " + error.line + ", Column " + error.column + ": " + error.message;
        });
        this.$el.html(lines.join("<br>"));
        return this.$el.show();
      }
    };

    return ParseErrorsView;

  })(Parse.View);

  ChartTextView = (function(_super) {

    __extends(ChartTextView, _super);

    function ChartTextView() {
      this.render = __bind(this.render, this);

      this.onChangeErrors = __bind(this.onChangeErrors, this);

      this.onChangeSelection = __bind(this.onChangeSelection, this);

      this.onChangeText = __bind(this.onChangeText, this);

      this.onCursorActivity = __bind(this.onCursorActivity, this);

      this.onEditText = __bind(this.onEditText, this);

      this.focus = __bind(this.focus, this);

      this.initialize = __bind(this.initialize, this);
      return ChartTextView.__super__.constructor.apply(this, arguments);
    }

    ChartTextView.prototype.initialize = function() {
      this.errorMarks = [];
      this.model.on("change:text", this.onChangeText);
      this.model.transient.on("change:selection", this.onChangeSelection);
      this.model.transient.on("change:errors", this.onChangeErrors);
      return this.render();
    };

    ChartTextView.prototype.focus = function() {
      return this.textArea.focus();
    };

    ChartTextView.prototype.onEditText = function() {
      var text,
        _this = this;
      text = this.textArea.getValue() || "";
      if (text !== (this.model.get('text') || "")) {
        return this.model.set({
          text: text
        }, {
          error: function() {
            return new ErrorView({
              message: "Unable to set text."
            });
          }
        });
      }
    };

    ChartTextView.prototype.onCursorActivity = function() {
      var end, start;
      start = this.textArea.getCursor("start");
      end = this.textArea.getCursor("end");
      return this.model.transient.set("selection", {
        start: {
          row: start.line,
          column: start.ch
        },
        end: {
          row: end.line,
          column: end.ch
        }
      });
    };

    ChartTextView.prototype.onChangeText = function() {
      var text;
      text = this.model.get("text") || "";
      if (this.textArea.getValue() !== text) {
        return this.textArea.setValue(text);
      }
    };

    ChartTextView.prototype.onChangeSelection = function() {
      var end, selection, start;
      selection = this.model.transient.get("selection");
      if (!selection) {
        return;
      }
      start = this.textArea.getCursor("start");
      end = this.textArea.getCursor("end");
      if (start.line !== selection.start.row || start.ch !== selection.start.column || end.line !== selection.end.row || end.ch !== selection.end.column) {
        return this.textArea.setSelection({
          line: selection.start.row,
          ch: selection.start.column
        }, {
          line: selection.end.row,
          ch: selection.end.column
        });
      }
    };

    ChartTextView.prototype.onChangeErrors = function() {
      var _this = this;
      _.each(this.errorMarks, function(mark) {
        return mark.clear();
      });
      this.errorMarks = [];
      return _.each(this.model.transient.get("errors"), function(error) {
        return _this.errorMarks.push(_this.textArea.markText({
          line: error.line - 1,
          ch: error.column - 1
        }, {
          line: error.line - 1,
          ch: (error.column + error.length) - 1
        }, {
          className: "error-mark"
        }));
      });
    };

    ChartTextView.prototype.render = function() {
      this.textArea = CodeMirror.fromTextArea(this.el, {
        theme: "solarized light"
      });
      this.textArea.on("change", this.onEditText);
      this.textArea.on("cursorActivity", this.onCursorActivity);
      this.onChangeText();
      return this.onChangeErrors();
    };

    return ChartTextView;

  })(Parse.View);

  LibraryView = (function(_super) {

    __extends(LibraryView, _super);

    function LibraryView() {
      this.onChangeLibrarySelect = __bind(this.onChangeLibrarySelect, this);

      this.onChangeLibraries = __bind(this.onChangeLibraries, this);

      this.onChangeLibrary = __bind(this.onChangeLibrary, this);
      return LibraryView.__super__.constructor.apply(this, arguments);
    }

    LibraryView.prototype.initialize = function() {
      this.render;
      this.chart = this.options.chart;
      this.render();
      this.chart.on("change:library", this.onChangeLibrary);
      return knitplot.on("change:libraries", this.onChangeLibraries);
    };

    LibraryView.prototype.onChangeLibrary = function() {
      return this.render();
    };

    LibraryView.prototype.onChangeLibraries = function() {
      return this.render();
    };

    LibraryView.prototype.onChangeLibrarySelect = function() {
      var libraryId,
        _this = this;
      libraryId = this.$("#library-select option:selected").attr("value");
      return _.each(knitplot.get("libraries"), function(library) {
        if (library.id === libraryId) {
          return _this.chart.set("library", library);
        }
      });
    };

    LibraryView.prototype.render = function() {
      var template;
      template = _.template($("#library-template").html());
      this.$el.html(template({
        libraries: knitplot.get("libraries"),
        library: this.chart.get("library")
      }));
      return this.$("#library-select").on("change", this.onChangeLibrarySelect);
    };

    return LibraryView;

  })(Parse.View);

  AboutView = (function(_super) {

    __extends(AboutView, _super);

    function AboutView() {
      this.onAboutButton = __bind(this.onAboutButton, this);
      return AboutView.__super__.constructor.apply(this, arguments);
    }

    AboutView.prototype.initialize = function() {
      return this.render();
    };

    AboutView.prototype.onAboutButton = function() {
      return new AboutDialogView;
    };

    AboutView.prototype.render = function() {
      return $("#about").button().on("click", this.onAboutButton);
    };

    return AboutView;

  })(Parse.View);

  AboutDialogView = (function(_super) {

    __extends(AboutDialogView, _super);

    function AboutDialogView() {
      this.okay = __bind(this.okay, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return AboutDialogView.__super__.constructor.apply(this, arguments);
    }

    AboutDialogView.prototype.events = {
      "click #okay": "okay"
    };

    AboutDialogView.prototype.initialize = function() {
      return this.render();
    };

    AboutDialogView.prototype.render = function() {
      var template;
      template = $('#about-template').html();
      $(this.el).html(template);
      $(this.el).dialog({
        title: "About KnitPlot!",
        modal: true
      });
      return $('#dialog-button-bar #okay').button();
    };

    AboutDialogView.prototype.okay = function() {
      return $(this.el).remove();
    };

    return AboutDialogView;

  })(Parse.View);

  SVGPreviewView = (function(_super) {

    __extends(SVGPreviewView, _super);

    function SVGPreviewView() {
      this.okay = __bind(this.okay, this);

      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return SVGPreviewView.__super__.constructor.apply(this, arguments);
    }

    SVGPreviewView.prototype.events = {
      "click #okay": "okay"
    };

    SVGPreviewView.prototype.initialize = function() {
      this.url = this.options.url;
      return this.render();
    };

    SVGPreviewView.prototype.render = function() {
      var template;
      template = $('#svg-preview-template').html();
      $(this.el).html(_.template(template)({
        url: this.url
      }));
      $(this.el).dialog({
        title: "SVG",
        modal: true,
        width: 640,
        height: 480,
        position: {
          my: "center",
          at: "center",
          of: window
        }
      });
      return $("#dialog-button-bar #okay").button();
    };

    SVGPreviewView.prototype.okay = function() {
      return $(this.el).remove();
    };

    return SVGPreviewView;

  })(Parse.View);

}).call(this);
