// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/chart.proto

#ifndef PROTOBUF_storage_2fchart_2eproto__INCLUDED
#define PROTOBUF_storage_2fchart_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace chart_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_storage_2fchart_2eproto();
void protobuf_AssignDesc_storage_2fchart_2eproto();
void protobuf_ShutdownFile_storage_2fchart_2eproto();

class Color;
class Style;
class Point;
class Line;
class Rectangle;
class Circle;
class Polygon;
class Spline;
class Text;
class Shape;
class Graphic;
class Action;
class Row;
class ActionType;
class Library;
class Chart;
class ChartFile;

// ===================================================================

class Color : public ::google::protobuf::Message {
 public:
  Color();
  virtual ~Color();
  
  Color(const Color& from);
  
  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();
  
  void Swap(Color* other);
  
  // implements Message ----------------------------------------------
  
  Color* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 red = 1;
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 1;
  inline ::google::protobuf::int32 red() const;
  inline void set_red(::google::protobuf::int32 value);
  
  // required int32 green = 2;
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 2;
  inline ::google::protobuf::int32 green() const;
  inline void set_green(::google::protobuf::int32 value);
  
  // required int32 blue = 3;
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 3;
  inline ::google::protobuf::int32 blue() const;
  inline void set_blue(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Color)
 private:
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 red_;
  ::google::protobuf::int32 green_;
  ::google::protobuf::int32 blue_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Color* default_instance_;
};
// -------------------------------------------------------------------

class Style : public ::google::protobuf::Message {
 public:
  Style();
  virtual ~Style();
  
  Style(const Style& from);
  
  inline Style& operator=(const Style& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Style& default_instance();
  
  void Swap(Style* other);
  
  // implements Message ----------------------------------------------
  
  Style* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Style& from);
  void MergeFrom(const Style& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .chart_proto.Color fill = 1;
  inline bool has_fill() const;
  inline void clear_fill();
  static const int kFillFieldNumber = 1;
  inline const ::chart_proto::Color& fill() const;
  inline ::chart_proto::Color* mutable_fill();
  inline ::chart_proto::Color* release_fill();
  
  // optional .chart_proto.Color stroke = 2;
  inline bool has_stroke() const;
  inline void clear_stroke();
  static const int kStrokeFieldNumber = 2;
  inline const ::chart_proto::Color& stroke() const;
  inline ::chart_proto::Color* mutable_stroke();
  inline ::chart_proto::Color* release_stroke();
  
  // optional int32 stroke_width = 3 [default = 1];
  inline bool has_stroke_width() const;
  inline void clear_stroke_width();
  static const int kStrokeWidthFieldNumber = 3;
  inline ::google::protobuf::int32 stroke_width() const;
  inline void set_stroke_width(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Style)
 private:
  inline void set_has_fill();
  inline void clear_has_fill();
  inline void set_has_stroke();
  inline void clear_has_stroke();
  inline void set_has_stroke_width();
  inline void clear_has_stroke_width();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::chart_proto::Color* fill_;
  ::chart_proto::Color* stroke_;
  ::google::protobuf::int32 stroke_width_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Style* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();
  
  Point(const Point& from);
  
  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();
  
  void Swap(Point* other);
  
  // implements Message ----------------------------------------------
  
  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Line : public ::google::protobuf::Message {
 public:
  Line();
  virtual ~Line();
  
  Line(const Line& from);
  
  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Line& default_instance();
  
  void Swap(Line* other);
  
  // implements Message ----------------------------------------------
  
  Line* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .chart_proto.Point point1 = 1;
  inline bool has_point1() const;
  inline void clear_point1();
  static const int kPoint1FieldNumber = 1;
  inline const ::chart_proto::Point& point1() const;
  inline ::chart_proto::Point* mutable_point1();
  inline ::chart_proto::Point* release_point1();
  
  // required .chart_proto.Point point2 = 2;
  inline bool has_point2() const;
  inline void clear_point2();
  static const int kPoint2FieldNumber = 2;
  inline const ::chart_proto::Point& point2() const;
  inline ::chart_proto::Point* mutable_point2();
  inline ::chart_proto::Point* release_point2();
  
  // @@protoc_insertion_point(class_scope:chart_proto.Line)
 private:
  inline void set_has_point1();
  inline void clear_has_point1();
  inline void set_has_point2();
  inline void clear_has_point2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::chart_proto::Point* point1_;
  ::chart_proto::Point* point2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Line* default_instance_;
};
// -------------------------------------------------------------------

class Rectangle : public ::google::protobuf::Message {
 public:
  Rectangle();
  virtual ~Rectangle();
  
  Rectangle(const Rectangle& from);
  
  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();
  
  void Swap(Rectangle* other);
  
  // implements Message ----------------------------------------------
  
  Rectangle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .chart_proto.Point top_left = 1;
  inline bool has_top_left() const;
  inline void clear_top_left();
  static const int kTopLeftFieldNumber = 1;
  inline const ::chart_proto::Point& top_left() const;
  inline ::chart_proto::Point* mutable_top_left();
  inline ::chart_proto::Point* release_top_left();
  
  // required float width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline float width() const;
  inline void set_width(float value);
  
  // required float height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline float height() const;
  inline void set_height(float value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Rectangle)
 private:
  inline void set_has_top_left();
  inline void clear_has_top_left();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::chart_proto::Point* top_left_;
  float width_;
  float height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Rectangle* default_instance_;
};
// -------------------------------------------------------------------

class Circle : public ::google::protobuf::Message {
 public:
  Circle();
  virtual ~Circle();
  
  Circle(const Circle& from);
  
  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Circle& default_instance();
  
  void Swap(Circle* other);
  
  // implements Message ----------------------------------------------
  
  Circle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Circle& from);
  void MergeFrom(const Circle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .chart_proto.Point center = 1;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 1;
  inline const ::chart_proto::Point& center() const;
  inline ::chart_proto::Point* mutable_center();
  inline ::chart_proto::Point* release_center();
  
  // required float radius = 2;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 2;
  inline float radius() const;
  inline void set_radius(float value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Circle)
 private:
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_radius();
  inline void clear_has_radius();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::chart_proto::Point* center_;
  float radius_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Circle* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message {
 public:
  Polygon();
  virtual ~Polygon();
  
  Polygon(const Polygon& from);
  
  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();
  
  void Swap(Polygon* other);
  
  // implements Message ----------------------------------------------
  
  Polygon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .chart_proto.Point point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::chart_proto::Point& point(int index) const;
  inline ::chart_proto::Point* mutable_point(int index);
  inline ::chart_proto::Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
      mutable_point();
  
  // @@protoc_insertion_point(class_scope:chart_proto.Polygon)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Point > point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// -------------------------------------------------------------------

class Spline : public ::google::protobuf::Message {
 public:
  Spline();
  virtual ~Spline();
  
  Spline(const Spline& from);
  
  inline Spline& operator=(const Spline& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Spline& default_instance();
  
  void Swap(Spline* other);
  
  // implements Message ----------------------------------------------
  
  Spline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spline& from);
  void MergeFrom(const Spline& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .chart_proto.Point point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::chart_proto::Point& point(int index) const;
  inline ::chart_proto::Point* mutable_point(int index);
  inline ::chart_proto::Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
      mutable_point();
  
  // @@protoc_insertion_point(class_scope:chart_proto.Spline)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Point > point_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Spline* default_instance_;
};
// -------------------------------------------------------------------

class Text : public ::google::protobuf::Message {
 public:
  Text();
  virtual ~Text();
  
  Text(const Text& from);
  
  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Text& default_instance();
  
  void Swap(Text* other);
  
  // implements Message ----------------------------------------------
  
  Text* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .chart_proto.Point point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::chart_proto::Point& point() const;
  inline ::chart_proto::Point* mutable_point();
  inline ::chart_proto::Point* release_point();
  
  // required string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:chart_proto.Text)
 private:
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::chart_proto::Point* point_;
  ::std::string* text_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Text* default_instance_;
};
// -------------------------------------------------------------------

class Shape : public ::google::protobuf::Message {
 public:
  Shape();
  virtual ~Shape();
  
  Shape(const Shape& from);
  
  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();
  
  void Swap(Shape* other);
  
  // implements Message ----------------------------------------------
  
  Shape* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .chart_proto.Line line = 1;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 1;
  inline const ::chart_proto::Line& line() const;
  inline ::chart_proto::Line* mutable_line();
  inline ::chart_proto::Line* release_line();
  
  // optional .chart_proto.Rectangle rectangle = 2;
  inline bool has_rectangle() const;
  inline void clear_rectangle();
  static const int kRectangleFieldNumber = 2;
  inline const ::chart_proto::Rectangle& rectangle() const;
  inline ::chart_proto::Rectangle* mutable_rectangle();
  inline ::chart_proto::Rectangle* release_rectangle();
  
  // optional .chart_proto.Circle circle = 3;
  inline bool has_circle() const;
  inline void clear_circle();
  static const int kCircleFieldNumber = 3;
  inline const ::chart_proto::Circle& circle() const;
  inline ::chart_proto::Circle* mutable_circle();
  inline ::chart_proto::Circle* release_circle();
  
  // optional .chart_proto.Polygon polygon = 4;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 4;
  inline const ::chart_proto::Polygon& polygon() const;
  inline ::chart_proto::Polygon* mutable_polygon();
  inline ::chart_proto::Polygon* release_polygon();
  
  // optional .chart_proto.Spline spline = 9;
  inline bool has_spline() const;
  inline void clear_spline();
  static const int kSplineFieldNumber = 9;
  inline const ::chart_proto::Spline& spline() const;
  inline ::chart_proto::Spline* mutable_spline();
  inline ::chart_proto::Spline* release_spline();
  
  // optional .chart_proto.Text text = 8;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 8;
  inline const ::chart_proto::Text& text() const;
  inline ::chart_proto::Text* mutable_text();
  inline ::chart_proto::Text* release_text();
  
  // optional .chart_proto.Style style = 5;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 5;
  inline const ::chart_proto::Style& style() const;
  inline ::chart_proto::Style* mutable_style();
  inline ::chart_proto::Style* release_style();
  
  // optional int32 text_offset = 6;
  inline bool has_text_offset() const;
  inline void clear_text_offset();
  static const int kTextOffsetFieldNumber = 6;
  inline ::google::protobuf::int32 text_offset() const;
  inline void set_text_offset(::google::protobuf::int32 value);
  
  // optional int32 text_length = 7;
  inline bool has_text_length() const;
  inline void clear_text_length();
  static const int kTextLengthFieldNumber = 7;
  inline ::google::protobuf::int32 text_length() const;
  inline void set_text_length(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Shape)
 private:
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_rectangle();
  inline void clear_has_rectangle();
  inline void set_has_circle();
  inline void clear_has_circle();
  inline void set_has_polygon();
  inline void clear_has_polygon();
  inline void set_has_spline();
  inline void clear_has_spline();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_text_offset();
  inline void clear_has_text_offset();
  inline void set_has_text_length();
  inline void clear_has_text_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::chart_proto::Line* line_;
  ::chart_proto::Rectangle* rectangle_;
  ::chart_proto::Circle* circle_;
  ::chart_proto::Polygon* polygon_;
  ::chart_proto::Spline* spline_;
  ::chart_proto::Text* text_;
  ::chart_proto::Style* style_;
  ::google::protobuf::int32 text_offset_;
  ::google::protobuf::int32 text_length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Shape* default_instance_;
};
// -------------------------------------------------------------------

class Graphic : public ::google::protobuf::Message {
 public:
  Graphic();
  virtual ~Graphic();
  
  Graphic(const Graphic& from);
  
  inline Graphic& operator=(const Graphic& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Graphic& default_instance();
  
  void Swap(Graphic* other);
  
  // implements Message ----------------------------------------------
  
  Graphic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Graphic& from);
  void MergeFrom(const Graphic& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .chart_proto.Shape shape = 1;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 1;
  inline const ::chart_proto::Shape& shape(int index) const;
  inline ::chart_proto::Shape* mutable_shape(int index);
  inline ::chart_proto::Shape* add_shape();
  inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >&
      shape() const;
  inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >*
      mutable_shape();
  
  // optional float width = 2;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline float width() const;
  inline void set_width(float value);
  
  // optional float height = 3;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 3;
  inline float height() const;
  inline void set_height(float value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Graphic)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape > shape_;
  float width_;
  float height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Graphic* default_instance_;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();
  
  Action(const Action& from);
  
  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();
  
  void Swap(Action* other);
  
  // implements Message ----------------------------------------------
  
  Action* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  
  // required int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional int32 repetitions = 2 [default = 1];
  inline bool has_repetitions() const;
  inline void clear_repetitions();
  static const int kRepetitionsFieldNumber = 2;
  inline ::google::protobuf::int32 repetitions() const;
  inline void set_repetitions(::google::protobuf::int32 value);
  
  // optional int32 text_offset = 4;
  inline bool has_text_offset() const;
  inline void clear_text_offset();
  static const int kTextOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 text_offset() const;
  inline void set_text_offset(::google::protobuf::int32 value);
  
  // optional int32 text_length = 5;
  inline bool has_text_length() const;
  inline void clear_text_length();
  static const int kTextLengthFieldNumber = 5;
  inline ::google::protobuf::int32 text_length() const;
  inline void set_text_length(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:chart_proto.Action)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_repetitions();
  inline void clear_has_repetitions();
  inline void set_has_text_offset();
  inline void clear_has_text_offset();
  inline void set_has_text_length();
  inline void clear_has_text_length();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* action_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 repetitions_;
  ::google::protobuf::int32 text_offset_;
  ::google::protobuf::int32 text_length_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message {
 public:
  Row();
  virtual ~Row();
  
  Row(const Row& from);
  
  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();
  
  void Swap(Row* other);
  
  // implements Message ----------------------------------------------
  
  Row* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .chart_proto.Action action = 1;
  inline int action_size() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline const ::chart_proto::Action& action(int index) const;
  inline ::chart_proto::Action* mutable_action(int index);
  inline ::chart_proto::Action* add_action();
  inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >&
      action() const;
  inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >*
      mutable_action();
  
  // @@protoc_insertion_point(class_scope:chart_proto.Row)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Action > action_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Row* default_instance_;
};
// -------------------------------------------------------------------

class ActionType : public ::google::protobuf::Message {
 public:
  ActionType();
  virtual ~ActionType();
  
  ActionType(const ActionType& from);
  
  inline ActionType& operator=(const ActionType& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionType& default_instance();
  
  void Swap(ActionType* other);
  
  // implements Message ----------------------------------------------
  
  ActionType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionType& from);
  void MergeFrom(const ActionType& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 width = 2 [default = 1];
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 2;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional .chart_proto.Graphic graphic = 4;
  inline bool has_graphic() const;
  inline void clear_graphic();
  static const int kGraphicFieldNumber = 4;
  inline const ::chart_proto::Graphic& graphic() const;
  inline ::chart_proto::Graphic* mutable_graphic();
  inline ::chart_proto::Graphic* release_graphic();
  
  // @@protoc_insertion_point(class_scope:chart_proto.ActionType)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_graphic();
  inline void clear_has_graphic();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::chart_proto::Graphic* graphic_;
  ::google::protobuf::int32 width_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static ActionType* default_instance_;
};
// -------------------------------------------------------------------

class Library : public ::google::protobuf::Message {
 public:
  Library();
  virtual ~Library();
  
  Library(const Library& from);
  
  inline Library& operator=(const Library& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Library& default_instance();
  
  void Swap(Library* other);
  
  // implements Message ----------------------------------------------
  
  Library* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Library& from);
  void MergeFrom(const Library& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .chart_proto.ActionType action_type = 1;
  inline int action_type_size() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  inline const ::chart_proto::ActionType& action_type(int index) const;
  inline ::chart_proto::ActionType* mutable_action_type(int index);
  inline ::chart_proto::ActionType* add_action_type();
  inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >&
      action_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >*
      mutable_action_type();
  
  // @@protoc_insertion_point(class_scope:chart_proto.Library)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType > action_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Library* default_instance_;
};
// -------------------------------------------------------------------

class Chart : public ::google::protobuf::Message {
 public:
  Chart();
  virtual ~Chart();
  
  Chart(const Chart& from);
  
  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart& default_instance();
  
  void Swap(Chart* other);
  
  // implements Message ----------------------------------------------
  
  Chart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chart& from);
  void MergeFrom(const Chart& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .chart_proto.Row row = 1;
  inline int row_size() const;
  inline void clear_row();
  static const int kRowFieldNumber = 1;
  inline const ::chart_proto::Row& row(int index) const;
  inline ::chart_proto::Row* mutable_row(int index);
  inline ::chart_proto::Row* add_row();
  inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >&
      row() const;
  inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >*
      mutable_row();
  
  // optional .chart_proto.Library library = 2;
  inline bool has_library() const;
  inline void clear_library();
  static const int kLibraryFieldNumber = 2;
  inline const ::chart_proto::Library& library() const;
  inline ::chart_proto::Library* mutable_library();
  inline ::chart_proto::Library* release_library();
  
  // @@protoc_insertion_point(class_scope:chart_proto.Chart)
 private:
  inline void set_has_library();
  inline void clear_has_library();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Row > row_;
  ::chart_proto::Library* library_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static Chart* default_instance_;
};
// -------------------------------------------------------------------

class ChartFile : public ::google::protobuf::Message {
 public:
  ChartFile();
  virtual ~ChartFile();
  
  ChartFile(const ChartFile& from);
  
  inline ChartFile& operator=(const ChartFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartFile& default_instance();
  
  void Swap(ChartFile* other);
  
  // implements Message ----------------------------------------------
  
  ChartFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChartFile& from);
  void MergeFrom(const ChartFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .chart_proto.Library library = 2;
  inline bool has_library() const;
  inline void clear_library();
  static const int kLibraryFieldNumber = 2;
  inline const ::chart_proto::Library& library() const;
  inline ::chart_proto::Library* mutable_library();
  inline ::chart_proto::Library* release_library();
  
  // optional string text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // @@protoc_insertion_point(class_scope:chart_proto.ChartFile)
 private:
  inline void set_has_library();
  inline void clear_has_library();
  inline void set_has_text();
  inline void clear_has_text();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::chart_proto::Library* library_;
  ::std::string* text_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_storage_2fchart_2eproto();
  friend void protobuf_AssignDesc_storage_2fchart_2eproto();
  friend void protobuf_ShutdownFile_storage_2fchart_2eproto();
  
  void InitAsDefaultInstance();
  static ChartFile* default_instance_;
};
// ===================================================================


// ===================================================================

// Color

// required int32 red = 1;
inline bool Color::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline ::google::protobuf::int32 Color::red() const {
  return red_;
}
inline void Color::set_red(::google::protobuf::int32 value) {
  set_has_red();
  red_ = value;
}

// required int32 green = 2;
inline bool Color::has_green() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_green() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_green() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_green() {
  green_ = 0;
  clear_has_green();
}
inline ::google::protobuf::int32 Color::green() const {
  return green_;
}
inline void Color::set_green(::google::protobuf::int32 value) {
  set_has_green();
  green_ = value;
}

// required int32 blue = 3;
inline bool Color::has_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_blue() {
  blue_ = 0;
  clear_has_blue();
}
inline ::google::protobuf::int32 Color::blue() const {
  return blue_;
}
inline void Color::set_blue(::google::protobuf::int32 value) {
  set_has_blue();
  blue_ = value;
}

// -------------------------------------------------------------------

// Style

// optional .chart_proto.Color fill = 1;
inline bool Style::has_fill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Style::set_has_fill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Style::clear_has_fill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Style::clear_fill() {
  if (fill_ != NULL) fill_->::chart_proto::Color::Clear();
  clear_has_fill();
}
inline const ::chart_proto::Color& Style::fill() const {
  return fill_ != NULL ? *fill_ : *default_instance_->fill_;
}
inline ::chart_proto::Color* Style::mutable_fill() {
  set_has_fill();
  if (fill_ == NULL) fill_ = new ::chart_proto::Color;
  return fill_;
}
inline ::chart_proto::Color* Style::release_fill() {
  clear_has_fill();
  ::chart_proto::Color* temp = fill_;
  fill_ = NULL;
  return temp;
}

// optional .chart_proto.Color stroke = 2;
inline bool Style::has_stroke() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Style::set_has_stroke() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Style::clear_has_stroke() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Style::clear_stroke() {
  if (stroke_ != NULL) stroke_->::chart_proto::Color::Clear();
  clear_has_stroke();
}
inline const ::chart_proto::Color& Style::stroke() const {
  return stroke_ != NULL ? *stroke_ : *default_instance_->stroke_;
}
inline ::chart_proto::Color* Style::mutable_stroke() {
  set_has_stroke();
  if (stroke_ == NULL) stroke_ = new ::chart_proto::Color;
  return stroke_;
}
inline ::chart_proto::Color* Style::release_stroke() {
  clear_has_stroke();
  ::chart_proto::Color* temp = stroke_;
  stroke_ = NULL;
  return temp;
}

// optional int32 stroke_width = 3 [default = 1];
inline bool Style::has_stroke_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Style::set_has_stroke_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Style::clear_has_stroke_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Style::clear_stroke_width() {
  stroke_width_ = 1;
  clear_has_stroke_width();
}
inline ::google::protobuf::int32 Style::stroke_width() const {
  return stroke_width_;
}
inline void Style::set_stroke_width(::google::protobuf::int32 value) {
  set_has_stroke_width();
  stroke_width_ = value;
}

// -------------------------------------------------------------------

// Point

// required float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Line

// required .chart_proto.Point point1 = 1;
inline bool Line::has_point1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::set_has_point1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Line::clear_has_point1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Line::clear_point1() {
  if (point1_ != NULL) point1_->::chart_proto::Point::Clear();
  clear_has_point1();
}
inline const ::chart_proto::Point& Line::point1() const {
  return point1_ != NULL ? *point1_ : *default_instance_->point1_;
}
inline ::chart_proto::Point* Line::mutable_point1() {
  set_has_point1();
  if (point1_ == NULL) point1_ = new ::chart_proto::Point;
  return point1_;
}
inline ::chart_proto::Point* Line::release_point1() {
  clear_has_point1();
  ::chart_proto::Point* temp = point1_;
  point1_ = NULL;
  return temp;
}

// required .chart_proto.Point point2 = 2;
inline bool Line::has_point2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::set_has_point2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Line::clear_has_point2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Line::clear_point2() {
  if (point2_ != NULL) point2_->::chart_proto::Point::Clear();
  clear_has_point2();
}
inline const ::chart_proto::Point& Line::point2() const {
  return point2_ != NULL ? *point2_ : *default_instance_->point2_;
}
inline ::chart_proto::Point* Line::mutable_point2() {
  set_has_point2();
  if (point2_ == NULL) point2_ = new ::chart_proto::Point;
  return point2_;
}
inline ::chart_proto::Point* Line::release_point2() {
  clear_has_point2();
  ::chart_proto::Point* temp = point2_;
  point2_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Rectangle

// required .chart_proto.Point top_left = 1;
inline bool Rectangle::has_top_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rectangle::set_has_top_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rectangle::clear_has_top_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rectangle::clear_top_left() {
  if (top_left_ != NULL) top_left_->::chart_proto::Point::Clear();
  clear_has_top_left();
}
inline const ::chart_proto::Point& Rectangle::top_left() const {
  return top_left_ != NULL ? *top_left_ : *default_instance_->top_left_;
}
inline ::chart_proto::Point* Rectangle::mutable_top_left() {
  set_has_top_left();
  if (top_left_ == NULL) top_left_ = new ::chart_proto::Point;
  return top_left_;
}
inline ::chart_proto::Point* Rectangle::release_top_left() {
  clear_has_top_left();
  ::chart_proto::Point* temp = top_left_;
  top_left_ = NULL;
  return temp;
}

// required float width = 2;
inline bool Rectangle::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rectangle::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rectangle::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rectangle::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Rectangle::width() const {
  return width_;
}
inline void Rectangle::set_width(float value) {
  set_has_width();
  width_ = value;
}

// required float height = 3;
inline bool Rectangle::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rectangle::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rectangle::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rectangle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Rectangle::height() const {
  return height_;
}
inline void Rectangle::set_height(float value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// Circle

// required .chart_proto.Point center = 1;
inline bool Circle::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Circle::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Circle::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Circle::clear_center() {
  if (center_ != NULL) center_->::chart_proto::Point::Clear();
  clear_has_center();
}
inline const ::chart_proto::Point& Circle::center() const {
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::chart_proto::Point* Circle::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::chart_proto::Point;
  return center_;
}
inline ::chart_proto::Point* Circle::release_center() {
  clear_has_center();
  ::chart_proto::Point* temp = center_;
  center_ = NULL;
  return temp;
}

// required float radius = 2;
inline bool Circle::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Circle::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Circle::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Circle::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float Circle::radius() const {
  return radius_;
}
inline void Circle::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// -------------------------------------------------------------------

// Polygon

// repeated .chart_proto.Point point = 1;
inline int Polygon::point_size() const {
  return point_.size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline const ::chart_proto::Point& Polygon::point(int index) const {
  return point_.Get(index);
}
inline ::chart_proto::Point* Polygon::mutable_point(int index) {
  return point_.Mutable(index);
}
inline ::chart_proto::Point* Polygon::add_point() {
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
Polygon::point() const {
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
Polygon::mutable_point() {
  return &point_;
}

// -------------------------------------------------------------------

// Spline

// repeated .chart_proto.Point point = 1;
inline int Spline::point_size() const {
  return point_.size();
}
inline void Spline::clear_point() {
  point_.Clear();
}
inline const ::chart_proto::Point& Spline::point(int index) const {
  return point_.Get(index);
}
inline ::chart_proto::Point* Spline::mutable_point(int index) {
  return point_.Mutable(index);
}
inline ::chart_proto::Point* Spline::add_point() {
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
Spline::point() const {
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
Spline::mutable_point() {
  return &point_;
}

// -------------------------------------------------------------------

// Text

// optional .chart_proto.Point point = 1;
inline bool Text::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Text::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Text::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Text::clear_point() {
  if (point_ != NULL) point_->::chart_proto::Point::Clear();
  clear_has_point();
}
inline const ::chart_proto::Point& Text::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::chart_proto::Point* Text::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::chart_proto::Point;
  return point_;
}
inline ::chart_proto::Point* Text::release_point() {
  clear_has_point();
  ::chart_proto::Point* temp = point_;
  point_ = NULL;
  return temp;
}

// required string text = 2;
inline bool Text::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Text::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Text::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Text::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Text::text() const {
  return *text_;
}
inline void Text::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Text::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Text::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Text::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Text::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Shape

// optional .chart_proto.Line line = 1;
inline bool Shape::has_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Shape::set_has_line() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Shape::clear_has_line() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Shape::clear_line() {
  if (line_ != NULL) line_->::chart_proto::Line::Clear();
  clear_has_line();
}
inline const ::chart_proto::Line& Shape::line() const {
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
inline ::chart_proto::Line* Shape::mutable_line() {
  set_has_line();
  if (line_ == NULL) line_ = new ::chart_proto::Line;
  return line_;
}
inline ::chart_proto::Line* Shape::release_line() {
  clear_has_line();
  ::chart_proto::Line* temp = line_;
  line_ = NULL;
  return temp;
}

// optional .chart_proto.Rectangle rectangle = 2;
inline bool Shape::has_rectangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Shape::set_has_rectangle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Shape::clear_has_rectangle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Shape::clear_rectangle() {
  if (rectangle_ != NULL) rectangle_->::chart_proto::Rectangle::Clear();
  clear_has_rectangle();
}
inline const ::chart_proto::Rectangle& Shape::rectangle() const {
  return rectangle_ != NULL ? *rectangle_ : *default_instance_->rectangle_;
}
inline ::chart_proto::Rectangle* Shape::mutable_rectangle() {
  set_has_rectangle();
  if (rectangle_ == NULL) rectangle_ = new ::chart_proto::Rectangle;
  return rectangle_;
}
inline ::chart_proto::Rectangle* Shape::release_rectangle() {
  clear_has_rectangle();
  ::chart_proto::Rectangle* temp = rectangle_;
  rectangle_ = NULL;
  return temp;
}

// optional .chart_proto.Circle circle = 3;
inline bool Shape::has_circle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Shape::set_has_circle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Shape::clear_has_circle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Shape::clear_circle() {
  if (circle_ != NULL) circle_->::chart_proto::Circle::Clear();
  clear_has_circle();
}
inline const ::chart_proto::Circle& Shape::circle() const {
  return circle_ != NULL ? *circle_ : *default_instance_->circle_;
}
inline ::chart_proto::Circle* Shape::mutable_circle() {
  set_has_circle();
  if (circle_ == NULL) circle_ = new ::chart_proto::Circle;
  return circle_;
}
inline ::chart_proto::Circle* Shape::release_circle() {
  clear_has_circle();
  ::chart_proto::Circle* temp = circle_;
  circle_ = NULL;
  return temp;
}

// optional .chart_proto.Polygon polygon = 4;
inline bool Shape::has_polygon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Shape::set_has_polygon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Shape::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Shape::clear_polygon() {
  if (polygon_ != NULL) polygon_->::chart_proto::Polygon::Clear();
  clear_has_polygon();
}
inline const ::chart_proto::Polygon& Shape::polygon() const {
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::chart_proto::Polygon* Shape::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) polygon_ = new ::chart_proto::Polygon;
  return polygon_;
}
inline ::chart_proto::Polygon* Shape::release_polygon() {
  clear_has_polygon();
  ::chart_proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}

// optional .chart_proto.Spline spline = 9;
inline bool Shape::has_spline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Shape::set_has_spline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Shape::clear_has_spline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Shape::clear_spline() {
  if (spline_ != NULL) spline_->::chart_proto::Spline::Clear();
  clear_has_spline();
}
inline const ::chart_proto::Spline& Shape::spline() const {
  return spline_ != NULL ? *spline_ : *default_instance_->spline_;
}
inline ::chart_proto::Spline* Shape::mutable_spline() {
  set_has_spline();
  if (spline_ == NULL) spline_ = new ::chart_proto::Spline;
  return spline_;
}
inline ::chart_proto::Spline* Shape::release_spline() {
  clear_has_spline();
  ::chart_proto::Spline* temp = spline_;
  spline_ = NULL;
  return temp;
}

// optional .chart_proto.Text text = 8;
inline bool Shape::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Shape::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Shape::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Shape::clear_text() {
  if (text_ != NULL) text_->::chart_proto::Text::Clear();
  clear_has_text();
}
inline const ::chart_proto::Text& Shape::text() const {
  return text_ != NULL ? *text_ : *default_instance_->text_;
}
inline ::chart_proto::Text* Shape::mutable_text() {
  set_has_text();
  if (text_ == NULL) text_ = new ::chart_proto::Text;
  return text_;
}
inline ::chart_proto::Text* Shape::release_text() {
  clear_has_text();
  ::chart_proto::Text* temp = text_;
  text_ = NULL;
  return temp;
}

// optional .chart_proto.Style style = 5;
inline bool Shape::has_style() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Shape::set_has_style() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Shape::clear_has_style() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Shape::clear_style() {
  if (style_ != NULL) style_->::chart_proto::Style::Clear();
  clear_has_style();
}
inline const ::chart_proto::Style& Shape::style() const {
  return style_ != NULL ? *style_ : *default_instance_->style_;
}
inline ::chart_proto::Style* Shape::mutable_style() {
  set_has_style();
  if (style_ == NULL) style_ = new ::chart_proto::Style;
  return style_;
}
inline ::chart_proto::Style* Shape::release_style() {
  clear_has_style();
  ::chart_proto::Style* temp = style_;
  style_ = NULL;
  return temp;
}

// optional int32 text_offset = 6;
inline bool Shape::has_text_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Shape::set_has_text_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Shape::clear_has_text_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Shape::clear_text_offset() {
  text_offset_ = 0;
  clear_has_text_offset();
}
inline ::google::protobuf::int32 Shape::text_offset() const {
  return text_offset_;
}
inline void Shape::set_text_offset(::google::protobuf::int32 value) {
  set_has_text_offset();
  text_offset_ = value;
}

// optional int32 text_length = 7;
inline bool Shape::has_text_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Shape::set_has_text_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Shape::clear_has_text_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Shape::clear_text_length() {
  text_length_ = 0;
  clear_has_text_length();
}
inline ::google::protobuf::int32 Shape::text_length() const {
  return text_length_;
}
inline void Shape::set_text_length(::google::protobuf::int32 value) {
  set_has_text_length();
  text_length_ = value;
}

// -------------------------------------------------------------------

// Graphic

// repeated .chart_proto.Shape shape = 1;
inline int Graphic::shape_size() const {
  return shape_.size();
}
inline void Graphic::clear_shape() {
  shape_.Clear();
}
inline const ::chart_proto::Shape& Graphic::shape(int index) const {
  return shape_.Get(index);
}
inline ::chart_proto::Shape* Graphic::mutable_shape(int index) {
  return shape_.Mutable(index);
}
inline ::chart_proto::Shape* Graphic::add_shape() {
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >&
Graphic::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >*
Graphic::mutable_shape() {
  return &shape_;
}

// optional float width = 2;
inline bool Graphic::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Graphic::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Graphic::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Graphic::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Graphic::width() const {
  return width_;
}
inline void Graphic::set_width(float value) {
  set_has_width();
  width_ = value;
}

// optional float height = 3;
inline bool Graphic::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Graphic::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Graphic::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Graphic::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Graphic::height() const {
  return height_;
}
inline void Graphic::set_height(float value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// Action

// required string action = 1;
inline bool Action::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_action() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& Action::action() const {
  return *action_;
}
inline void Action::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void Action::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(value);
}
inline void Action::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Action::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    action_ = new ::std::string;
  }
  return action_;
}
inline ::std::string* Action::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 width = 3;
inline bool Action::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Action::width() const {
  return width_;
}
inline void Action::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 repetitions = 2 [default = 1];
inline bool Action::has_repetitions() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_repetitions() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_repetitions() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_repetitions() {
  repetitions_ = 1;
  clear_has_repetitions();
}
inline ::google::protobuf::int32 Action::repetitions() const {
  return repetitions_;
}
inline void Action::set_repetitions(::google::protobuf::int32 value) {
  set_has_repetitions();
  repetitions_ = value;
}

// optional int32 text_offset = 4;
inline bool Action::has_text_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_text_offset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_text_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_text_offset() {
  text_offset_ = 0;
  clear_has_text_offset();
}
inline ::google::protobuf::int32 Action::text_offset() const {
  return text_offset_;
}
inline void Action::set_text_offset(::google::protobuf::int32 value) {
  set_has_text_offset();
  text_offset_ = value;
}

// optional int32 text_length = 5;
inline bool Action::has_text_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_text_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_text_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_text_length() {
  text_length_ = 0;
  clear_has_text_length();
}
inline ::google::protobuf::int32 Action::text_length() const {
  return text_length_;
}
inline void Action::set_text_length(::google::protobuf::int32 value) {
  set_has_text_length();
  text_length_ = value;
}

// -------------------------------------------------------------------

// Row

// repeated .chart_proto.Action action = 1;
inline int Row::action_size() const {
  return action_.size();
}
inline void Row::clear_action() {
  action_.Clear();
}
inline const ::chart_proto::Action& Row::action(int index) const {
  return action_.Get(index);
}
inline ::chart_proto::Action* Row::mutable_action(int index) {
  return action_.Mutable(index);
}
inline ::chart_proto::Action* Row::add_action() {
  return action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >&
Row::action() const {
  return action_;
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >*
Row::mutable_action() {
  return &action_;
}

// -------------------------------------------------------------------

// ActionType

// required string name = 1;
inline bool ActionType::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionType::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionType::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionType::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ActionType::name() const {
  return *name_;
}
inline void ActionType::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActionType::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ActionType::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ActionType::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ActionType::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 width = 2 [default = 1];
inline bool ActionType::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionType::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionType::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionType::clear_width() {
  width_ = 1;
  clear_has_width();
}
inline ::google::protobuf::int32 ActionType::width() const {
  return width_;
}
inline void ActionType::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional .chart_proto.Graphic graphic = 4;
inline bool ActionType::has_graphic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionType::set_has_graphic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionType::clear_has_graphic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionType::clear_graphic() {
  if (graphic_ != NULL) graphic_->::chart_proto::Graphic::Clear();
  clear_has_graphic();
}
inline const ::chart_proto::Graphic& ActionType::graphic() const {
  return graphic_ != NULL ? *graphic_ : *default_instance_->graphic_;
}
inline ::chart_proto::Graphic* ActionType::mutable_graphic() {
  set_has_graphic();
  if (graphic_ == NULL) graphic_ = new ::chart_proto::Graphic;
  return graphic_;
}
inline ::chart_proto::Graphic* ActionType::release_graphic() {
  clear_has_graphic();
  ::chart_proto::Graphic* temp = graphic_;
  graphic_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Library

// repeated .chart_proto.ActionType action_type = 1;
inline int Library::action_type_size() const {
  return action_type_.size();
}
inline void Library::clear_action_type() {
  action_type_.Clear();
}
inline const ::chart_proto::ActionType& Library::action_type(int index) const {
  return action_type_.Get(index);
}
inline ::chart_proto::ActionType* Library::mutable_action_type(int index) {
  return action_type_.Mutable(index);
}
inline ::chart_proto::ActionType* Library::add_action_type() {
  return action_type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >&
Library::action_type() const {
  return action_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >*
Library::mutable_action_type() {
  return &action_type_;
}

// -------------------------------------------------------------------

// Chart

// repeated .chart_proto.Row row = 1;
inline int Chart::row_size() const {
  return row_.size();
}
inline void Chart::clear_row() {
  row_.Clear();
}
inline const ::chart_proto::Row& Chart::row(int index) const {
  return row_.Get(index);
}
inline ::chart_proto::Row* Chart::mutable_row(int index) {
  return row_.Mutable(index);
}
inline ::chart_proto::Row* Chart::add_row() {
  return row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >&
Chart::row() const {
  return row_;
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >*
Chart::mutable_row() {
  return &row_;
}

// optional .chart_proto.Library library = 2;
inline bool Chart::has_library() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chart::set_has_library() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chart::clear_has_library() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chart::clear_library() {
  if (library_ != NULL) library_->::chart_proto::Library::Clear();
  clear_has_library();
}
inline const ::chart_proto::Library& Chart::library() const {
  return library_ != NULL ? *library_ : *default_instance_->library_;
}
inline ::chart_proto::Library* Chart::mutable_library() {
  set_has_library();
  if (library_ == NULL) library_ = new ::chart_proto::Library;
  return library_;
}
inline ::chart_proto::Library* Chart::release_library() {
  clear_has_library();
  ::chart_proto::Library* temp = library_;
  library_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ChartFile

// optional .chart_proto.Library library = 2;
inline bool ChartFile::has_library() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartFile::set_has_library() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartFile::clear_has_library() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartFile::clear_library() {
  if (library_ != NULL) library_->::chart_proto::Library::Clear();
  clear_has_library();
}
inline const ::chart_proto::Library& ChartFile::library() const {
  return library_ != NULL ? *library_ : *default_instance_->library_;
}
inline ::chart_proto::Library* ChartFile::mutable_library() {
  set_has_library();
  if (library_ == NULL) library_ = new ::chart_proto::Library;
  return library_;
}
inline ::chart_proto::Library* ChartFile::release_library() {
  clear_has_library();
  ::chart_proto::Library* temp = library_;
  library_ = NULL;
  return temp;
}

// optional string text = 4;
inline bool ChartFile::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartFile::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartFile::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartFile::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ChartFile::text() const {
  return *text_;
}
inline void ChartFile::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ChartFile::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ChartFile::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChartFile::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ChartFile::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace chart_proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2fchart_2eproto__INCLUDED
