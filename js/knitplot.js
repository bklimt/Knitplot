// Generated by CoffeeScript 1.3.3
(function() {
  var Chart, ChartParser, ErrorView, Graphic, Knitplot, Library, NotificationView, PatternEditView, PatternListView, Router, drawCircle, drawLine, drawPolygon, drawRectangle, drawShape, drawSpline, scaleAndTranslate, scaleAndTranslatePoint,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Library = {
    "a": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#40e0d0",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "bp": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#bebebe",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          circle: {
            center: [0.50, 0.50],
            radius: 0.30
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "ap": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#40e0d0",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          circle: {
            center: [0.50, 0.50],
            radius: 0.30
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "error": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ff0000",
            stroke: "#ff0000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "p": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#808080",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "ns": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k3tog": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.80, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.50, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k2tog": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.80, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "sk2p": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.50, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "ssk": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "cdd": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.50, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.20, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.50],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "yo": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          circle: {
            center: [0.50, 0.50],
            radius: 0.30
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "t#l": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[0.00, 0.00], [0.00, 1.00], [0.33, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[1.00, 0.00], [0.67, 0.00], [1.00, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "t#r": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[0.00, 0.00], [0.00, 1.00], [0.33, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          polygon: [[1.00, 0.00], [0.67, 1.00], [1.00, 1.00]],
          style: {
            fill: "#7f7f7f",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "c#l": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.00, 0.00],
            point2: [0.50, 1.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.00],
            point2: [1.00, 1.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "c#r": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.00, 1.00],
            point2: [0.50, 0.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 1.00],
            point2: [1.00, 0.00]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "b": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          spline: [[0.30, 0.80], [0.70, 0.40], [0.50, 0.10], [0.30, 0.40], [0.70, 0.80]],
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "tssk": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.10, 0.80],
            point2: [0.50, 0.20]
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          spline: [[0.60, 0.80], [0.90, 0.40], [0.75, 0.10], [0.60, 0.40], [0.90, 0.80]],
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "k2togtbl": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.90, 0.80],
            point2: [0.50, 0.20]
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          spline: [[0.10, 0.80], [0.40, 0.40], [0.25, 0.10], [0.10, 0.40], [0.40, 0.80]],
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "p2togtbl": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.60],
            point2: [0.40, 0.60]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "p2tog": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.60, 0.60],
            point2: [0.80, 0.60]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.80, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    },
    "mil": {
      graphic: [
        {
          rectangle: {
            topLeft: [0.00, 0.00],
            width: 1.00,
            height: 1.00
          },
          style: {
            fill: "#ffffff",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.20, 0.80],
            point2: [0.50, 0.20]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }, {
          line: {
            point1: [0.50, 0.20],
            point2: [0.80, 0.80]
          },
          style: {
            fill: "#000000",
            stroke: "#000000",
            "stroke-width": 1
          }
        }
      ]
    }
  };

  Chart = (function(_super) {

    __extends(Chart, _super);

    function Chart() {
      return Chart.__super__.constructor.apply(this, arguments);
    }

    Chart.prototype.className = "Chart";

    return Chart;

  })(Parse.Object);

  ChartParser = (function() {

    function ChartParser() {
      this._parseChart = __bind(this._parseChart, this);

      this._parseRow = __bind(this._parseRow, this);

      this._parseAction = __bind(this._parseAction, this);

      this._eatWhitespace = __bind(this._eatWhitespace, this);

      this._addMessage = __bind(this._addMessage, this);

      this.parse = __bind(this.parse, this);

    }

    ChartParser.prototype.parse = function(text) {
      var chart;
      this.text = text;
      this.line = 0;
      this.lineStart = 0;
      this.tokenLength = 1;
      this.offset = 0;
      this.warnings = [];
      this.errors = [];
      chart = this._parseChart();
      return {
        chart: chart,
        errors: this.errors,
        warnings: this.warnings
      };
    };

    ChartParser.prototype._addMessage = function(list, message) {
      return list.push({
        message: message,
        offset: this.offset - this.tokenLength,
        line: this.line + 1,
        column: ((this.offset - this.tokenLength) - this.lineStart) + 1,
        length: this.tokenLength
      });
    };

    ChartParser.prototype._eatWhitespace = function() {
      var _results;
      this.tokenLength = 0;
      _results = [];
      while (this.text[this.offset] && /[ \t\r]/.test(this.text[this.offset])) {
        _results.push(this.offset++);
      }
      return _results;
    };

    ChartParser.prototype._parseAction = function() {
      var action, altText, defaults, found, match, number, prefix, start, suffix, text, _ref, _ref1;
      this._eatWhitespace();
      start = this.offset;
      this.tokenLength = 0;
      while (this.text[this.offset] && !/[, \t\r\n]/.test(this.text[this.offset])) {
        ++this.offset;
        ++this.tokenLength;
      }
      if (this.tokenLength === 0) {
        if ((!this.text[this.offset]) || /\r\n/.test(this.text[this.offset])) {
          return null;
        } else {
          this._addMessage(this.warnings, "Missing action.");
          return null;
        }
      }
      text = this.text.slice(start, start + this.tokenLength);
      action = {
        action: text,
        width: 1,
        textOffset: this.offset - this.tokenLength,
        textLength: this.tokenLength
      };
      _ref = /^(.*[^0-9])([0-9]*)$/.exec(text), match = _ref[0], text = _ref[1], number = _ref[2];
      action.action = text;
      if (number) {
        action.repetitions = parseInt(number);
      }
      defaults = {
        width: 1,
        repetitions: 1
      };
      found = false;
      if (Library[text]) {
        action = _.extend(defaults, Library[text], action);
        found = true;
      } else {
        _ref1 = /^([^0-9]*)([0-9]*)([^0-9]*)$/.exec(text), match = _ref1[0], prefix = _ref1[1], number = _ref1[2], suffix = _ref1[3];
        if (match) {
          altText = "" + prefix + "#" + suffix;
          if (match && Library[altText]) {
            action = _.extend(defaults, Library[altText], action);
            action.action = altText;
            action.width = action.width * parseInt(number);
            found = true;
          }
        }
      }
      if (!found) {
        this._addMessage(this.errors, "Unknown action type: \"" + text + "\".");
        action = _.extend(defaults, Library.error, action, {
          action: "error"
        });
      }
      return action;
    };

    ChartParser.prototype._parseRow = function() {
      var action, row, start, token;
      row = [];
      this._eatWhitespace();
      if ((!this.text[this.offset]) || this.text[this.offset] === "\n") {
        return row;
      }
      action = this._parseAction();
      if (action) {
        row.push(action);
      }
      this._eatWhitespace();
      while (!((!this.text[this.offset]) || this.text[this.offset] === "\n")) {
        if (this.text[this.offset] === ",") {
          ++this.offset;
          action = this._parseAction();
          if (action) {
            row.push(action);
          }
          this._eatWhitespace();
        } else {
          start = this.offset;
          while (!((!this.text[this.offset]) || /[, \t\r\n]/.test(this.text[this.offset]))) {
            ++this.offset;
            ++this.tokenLength;
          }
          token = this.text.slice(start, start + this.tokenLength);
          this._addMessage(this.errors, "Stray text: \"" + token + "\".");
          this._eatWhitespace();
        }
      }
      return row;
    };

    ChartParser.prototype._parseChart = function() {
      var chart;
      this._eatWhitespace();
      chart = [];
      while (this.text[this.offset] && this.text[this.offset] === "\n") {
        ++this.offset;
        this._eatWhitespace();
      }
      if (!this.text[this.offset]) {
        return chart;
      }
      chart.push(this._parseRow());
      this._eatWhitespace();
      while (this.text[this.offset]) {
        if (this.text[this.offset] === "\n") {
          ++this.offset;
          ++this.line;
          this.lineStart = this.offset;
          this._eatWhitespace();
          if (!this.text[this.offset]) {
            return chart;
          }
          chart.push(this._parseRow());
          this._eatWhitespace();
        } else {
          this._addMessage(this.errors, "Stray text after row.");
          ++this.offset;
        }
      }
      return chart;
    };

    return ChartParser;

  })();

  window.ChartParser = ChartParser;

  drawLine = function(canvas, shape) {
    var line, path;
    path = ("M" + shape.line.point1[0] + "," + shape.line.point1[1]) + ("L" + shape.line.point2[0] + "," + shape.line.point2[1]);
    line = canvas.path(path);
    return line.attr(shape.style);
  };

  drawRectangle = function(canvas, shape) {
    var rect;
    rect = canvas.rect(shape.rectangle.topLeft[0], shape.rectangle.topLeft[1], shape.rectangle.width, shape.rectangle.height);
    return rect.attr(shape.style);
  };

  drawCircle = function(canvas, shape) {
    var circle;
    circle = canvas.circle(shape.circle.center[0], shape.circle.center[1], shape.circle.radius);
    return circle.attr(shape.style);
  };

  drawPolygon = function(canvas, shape) {
    var path, point, polygon;
    path = ("M" + shape.polygon[0][0] + "," + shape.polygon[0][1]) + ((function() {
      var _i, _len, _ref, _results;
      _ref = shape.polygon.slice(1);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push("L" + point[0] + "," + point[1]);
      }
      return _results;
    })()).join("");
    polygon = canvas.path(path);
    return polygon.attr(shape.style);
  };

  drawSpline = function(canvas, shape) {
    var c, current, next, path, spline;
    current = shape.spline[0];
    next = shape.spline[1];
    c = [(current[0] + next[0]) / 2, (current[1] + next[1]) / 2];
    path = "M" + current[0] + "," + current[1] + "L" + c[0] + "," + c[1];
    _.each(shape.spline.slice(2), function(point) {
      current = next;
      next = point;
      c = [(current[0] + next[0]) / 2, (current[1] + next[1]) / 2];
      return path = "" + path + " Q" + current[0] + "," + current[1] + " " + c[0] + "," + c[1];
    });
    path = "" + path + " L" + next[0] + "," + next[1];
    spline = canvas.path(path);
    return spline.attr(shape.style);
  };

  drawShape = function(canvas, shape) {
    if (shape.line) {
      return drawLine(canvas, shape);
    } else if (shape.rectangle) {
      return drawRectangle(canvas, shape);
    } else if (shape.circle) {
      return drawCircle(canvas, shape);
    } else if (shape.polygon) {
      return drawPolygon(canvas, shape);
    } else if (shape.spline) {
      return drawSpline(canvas, shape);
    } else {
      return console.warn(shape);
    }
  };

  scaleAndTranslatePoint = function(point, x, y, width, height) {
    return [point[0] * width + x, point[1] * height + y];
  };

  scaleAndTranslate = function(shape, x, y, width, height) {
    var point;
    if (shape.line) {
      return {
        line: {
          point1: scaleAndTranslatePoint(shape.line.point1, x, y, width, height),
          point2: scaleAndTranslatePoint(shape.line.point2, x, y, width, height)
        },
        style: shape.style
      };
    } else if (shape.rectangle) {
      return {
        rectangle: {
          topLeft: scaleAndTranslatePoint(shape.rectangle.topLeft, x, y, width, height),
          width: shape.rectangle.width * width,
          height: shape.rectangle.height * height
        },
        style: shape.style
      };
    } else if (shape.circle) {
      return {
        circle: {
          center: scaleAndTranslatePoint(shape.circle.center, x, y, width, height),
          radius: Math.min(shape.circle.radius * width, shape.circle.radius * height)
        },
        style: shape.style
      };
    } else if (shape.polygon) {
      return {
        polygon: (function() {
          var _i, _len, _ref, _results;
          _ref = shape.polygon;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            _results.push(scaleAndTranslatePoint(point, x, y, width, height));
          }
          return _results;
        })(),
        style: shape.style
      };
    } else if (shape.spline) {
      return {
        spline: (function() {
          var _i, _len, _ref, _results;
          _ref = shape.spline;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            point = _ref[_i];
            _results.push(scaleAndTranslatePoint(point, x, y, width, height));
          }
          return _results;
        })(),
        style: shape.style
      };
    } else {
      console.warn(shape);
      return {};
    }
  };

  Graphic = (function() {

    function Graphic(chart, maxWidth, maxHeight) {
      var action, column, columnWidth, columns, height, newShape, newShapeHeight, newShapeWidth, newShapeX, newShapeY, rep, row, rowHeight, rowIndex, rows, shape, width, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _n, _ref, _ref1;
      columns = 1;
      for (_i = 0, _len = chart.length; _i < _len; _i++) {
        row = chart[_i];
        column = 0;
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          action = row[_j];
          column = column + (action.width * action.repetitions);
        }
        if (column > columns) {
          columns = column;
        }
      }
      rows = chart.length;
      width = maxWidth;
      columnWidth = width / columns;
      rowHeight = columnWidth * 0.75;
      height = rowHeight * rows;
      if (height > maxHeight) {
        height = maxHeight;
        rowHeight = height / rows;
        columnWidth = rowHeight / 0.75;
        width = columnWidth * columns;
      }
      this.graphic = {
        width: width,
        height: height,
        shapes: []
      };
      for (rowIndex = _k = 0, _len2 = chart.length; _k < _len2; rowIndex = ++_k) {
        row = chart[rowIndex];
        column = 0;
        for (_l = 0, _len3 = row.length; _l < _len3; _l++) {
          action = row[_l];
          for (rep = _m = 1, _ref = action.repetitions; 1 <= _ref ? _m <= _ref : _m >= _ref; rep = 1 <= _ref ? ++_m : --_m) {
            _ref1 = action.graphic;
            for (_n = 0, _len4 = _ref1.length; _n < _len4; _n++) {
              shape = _ref1[_n];
              newShapeX = (columns - (column + action.width)) * columnWidth;
              newShapeY = (rows - (rowIndex + 1)) * rowHeight;
              newShapeWidth = action.width * columnWidth;
              newShapeHeight = rowHeight;
              newShape = scaleAndTranslate(shape, newShapeX, newShapeY, newShapeWidth, newShapeHeight);
              newShape.textOffset = action.textOffset;
              newShape.textLength = action.textLength;
              this.graphic.shapes.push(newShape);
            }
            column = column + action.width;
          }
        }
      }
    }

    Graphic.prototype.draw = function(canvas) {
      var shape, _i, _len, _ref, _results;
      canvas.clear();
      _ref = this.graphic.shapes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        _results.push(drawShape(canvas, shape));
      }
      return _results;
    };

    return Graphic;

  })();

  NotificationView = (function(_super) {

    __extends(NotificationView, _super);

    function NotificationView() {
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return NotificationView.__super__.constructor.apply(this, arguments);
    }

    NotificationView.prototype.className = "success";

    NotificationView.prototype.initialize = function() {
      return this.render();
    };

    NotificationView.prototype.render = function() {
      var _ref,
        _this = this;
      $(this.el).html((_ref = this.options.message) != null ? _ref : "Success!");
      $(this.el).hide();
      $("#notification").html(this.el);
      $(this.el).slideDown();
      $.doTimeout(5000, function() {
        $(_this.el).slideUp();
        return $.doTimeout(2000, function() {
          return $(_this.el).remove();
        });
      });
      return this.delegateEvents();
    };

    return NotificationView;

  })(Parse.View);

  ErrorView = (function(_super) {

    __extends(ErrorView, _super);

    function ErrorView() {
      return ErrorView.__super__.constructor.apply(this, arguments);
    }

    ErrorView.prototype.className = "error";

    return ErrorView;

  })(NotificationView);

  PatternListView = (function(_super) {

    __extends(PatternListView, _super);

    function PatternListView() {
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return PatternListView.__super__.constructor.apply(this, arguments);
    }

    PatternListView.prototype.initialize = function() {
      this.start = this.options.start;
      return this.render();
    };

    PatternListView.prototype.render = function() {
      var template;
      template = $("#chart-list-template").html();
      $(this.el).html(_.template(template)({
        collection: this.collection.first(10),
        start: this.start,
        previous: this.start - 10,
        next: this.collection.size() > 10 ? this.start + 10 : 0
      }));
      $("#leftbar").html(this.el);
      return this.delegateEvents();
    };

    return PatternListView;

  })(Parse.View);

  PatternEditView = (function(_super) {

    __extends(PatternEditView, _super);

    function PatternEditView() {
      this.render = __bind(this.render, this);

      this.updateText = __bind(this.updateText, this);

      this.updateTitle = __bind(this.updateTitle, this);

      this.save = __bind(this.save, this);

      this.initialize = __bind(this.initialize, this);
      return PatternEditView.__super__.constructor.apply(this, arguments);
    }

    PatternEditView.prototype.events = {
      "submit form": "save",
      "keyup input": "updateTitle",
      "keyup textarea": "updateText"
    };

    PatternEditView.prototype.initialize = function() {
      this.parser = new ChartParser();
      return this.render();
    };

    PatternEditView.prototype.save = function() {
      var attrs, options,
        _this = this;
      attrs = {
        title: this.$('[name=title]').val(),
        text: this.$('[name=text]').val()
      };
      options = {
        error: function() {
          return new ErrorView({
            message: "Unable to set title and text."
          });
        }
      };
      if (knitplot.chart.set(attrs, options)) {
        knitplot.saveChart();
      }
      return false;
    };

    PatternEditView.prototype.updateTitle = function() {
      var title,
        _this = this;
      title = this.$('[name=title]').val();
      if (title !== (knitplot.chart.get('title') || "")) {
        return knitplot.chart.set({
          title: title
        }, {
          error: function() {
            return new ErrorView({
              message: "Unable to set title."
            });
          }
        });
      }
    };

    PatternEditView.prototype.updateText = function() {
      var chart, graphic, parseResults, text,
        _this = this;
      text = this.$('[name=text]').val();
      if (text !== (knitplot.chart.get('text') || "")) {
        knitplot.chart.set({
          text: text
        }, {
          error: function() {
            return new ErrorView({
              message: "Unable to set text."
            });
          }
        });
      }
      parseResults = this.parser.parse(text);
      chart = parseResults.chart;
      graphic = new Graphic(chart, this.canvas.width, this.canvas.height);
      return graphic.draw(this.canvas);
    };

    PatternEditView.prototype.render = function() {
      var div, template;
      template = $("#chart-template").html();
      $(this.el).html(_.template(template)({
        model: knitplot.chart
      }));
      $("#app").html(this.el);
      this.$("[name=title]").val(knitplot.chart.get("title"));
      this.$("[name=text]").val(knitplot.chart.get("text"));
      div = this.$('[name=chart]');
      this.canvas = new Raphael(div.get(0));
      this.updateTitle();
      this.updateText();
      return this.delegateEvents();
    };

    return PatternEditView;

  })(Parse.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      this.listCharts = __bind(this.listCharts, this);

      this.editChart = __bind(this.editChart, this);

      this.newChart = __bind(this.newChart, this);
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "newChart",
      "new": "newChart",
      "new/:start": "newChart",
      "chart/:id": "editChart",
      "chart/:id/:start": "editChart",
      "charts/:start": "listCharts"
    };

    Router.prototype.newChart = function(start) {
      if (knitplot.confirmUnload()) {
        return knitplot.newChart(start);
      }
    };

    Router.prototype.editChart = function(id, start) {
      if (knitplot.confirmUnload()) {
        return knitplot.editChart(id, start);
      }
    };

    Router.prototype.listCharts = function(start) {
      if (start == null) {
        start = 0;
      }
      return knitplot.listCharts(start);
    };

    return Router;

  })(Backbone.Router);

  Knitplot = (function() {

    function Knitplot() {
      this.confirmUnloadMessage = __bind(this.confirmUnloadMessage, this);

      this.confirmUnload = __bind(this.confirmUnload, this);

      this.fixHistory = __bind(this.fixHistory, this);

      this.listCharts = __bind(this.listCharts, this);

      this.saveChart = __bind(this.saveChart, this);

      this.editChart = __bind(this.editChart, this);

      this.newChart = __bind(this.newChart, this);

      this.init = __bind(this.init, this);

    }

    Knitplot.prototype.init = function() {
      this.start = 0;
      this.chart = new Chart();
      Parse.initialize("732uFxOqiBozGHcv6BUyEZrpQC0oIbmTbi4UJuK2", "JB48tpHfZ39NTwrRuQIoqq7GQzpdxLonrjpsj67L");
      new Router();
      Backbone.history.start();
      return $(window).bind('beforeunload', this.confirmUnloadMessage);
    };

    Knitplot.prototype.newChart = function(start) {
      this.chart = new Chart();
      if (start) {
        this.start = start;
      }
      this.listCharts(this.start);
      new PatternEditView();
      return this.fixHistory();
    };

    Knitplot.prototype.editChart = function(id, start) {
      var _this = this;
      this.chart = new Chart({
        objectId: id
      });
      if (start) {
        this.start = start;
      }
      this.chart.fetch({
        success: function() {
          return new PatternEditView();
        },
        error: function(pattern, error) {
          new Error({
            message: "Unable to load chart."
          });
          return window.location.hash = "#";
        }
      });
      return this.listCharts(this.start);
    };

    Knitplot.prototype.saveChart = function() {
      var _this = this;
      return knitplot.chart.save({
        success: function() {
          new NotificationView({
            message: "Saved!"
          });
          _this.listCharts(0);
          return _this.fixHistory();
        },
        error: function() {
          return new ErrorView({
            message: "Unable to save."
          });
        }
      });
    };

    Knitplot.prototype.listCharts = function(start) {
      var charts, query,
        _this = this;
      if (start == null) {
        start = 0;
      }
      this.start = start;
      query = new Parse.Query(Chart);
      query.descending("updatedAt", "createdAt").skip(start).limit(11);
      charts = query.collection();
      charts.fetch({
        success: function() {
          return new PatternListView({
            collection: charts,
            start: parseInt(start)
          });
        },
        error: function(charts, error) {
          return new Error({
            message: "Unable to load chart list."
          });
        }
      });
      return this.fixHistory();
    };

    Knitplot.prototype.fixHistory = function() {
      if (this.chart.isNew()) {
        return Backbone.history.navigate("#chart/new/" + this.start, {
          replace: true
        });
      } else {
        return Backbone.history.navigate("#chart/" + this.chart.id + "/" + this.start, {
          replace: true
        });
      }
    };

    Knitplot.prototype.confirmUnload = function() {
      var message;
      message = this.confirmUnloadMessage();
      if (message) {
        return confirm("Are you sure you want to leave this page?\n\n" + message);
      } else {
        return true;
      }
    };

    Knitplot.prototype.confirmUnloadMessage = function() {
      if (this.chart.dirty("text") || this.chart.dirty("title")) {
        return "Your chart has not been saved.";
      }
    };

    return Knitplot;

  })();

  window.knitplot = new Knitplot();

}).call(this);
