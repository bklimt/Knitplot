// Generated by CoffeeScript 1.3.3
(function() {
  var ChartParser, ErrorView, Knitplot, NotificationView, Pattern, PatternEditView, PatternListView, Router,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ChartParser = (function() {

    function ChartParser() {
      this._parseChart = __bind(this._parseChart, this);

      this._parseRow = __bind(this._parseRow, this);

      this._parseAction = __bind(this._parseAction, this);

      this._eatWhitespace = __bind(this._eatWhitespace, this);

      this._addMessage = __bind(this._addMessage, this);

      this.parse = __bind(this.parse, this);

    }

    ChartParser.prototype.parse = function(text, library) {
      var chart;
      this.text = text;
      this.library = library;
      this.line = 0;
      this.lineStart = 0;
      this.tokenLength = 1;
      this.offset = 0;
      this.warnings = [];
      this.errors = [];
      chart = this._parseChart();
      return {
        chart: chart,
        errors: this.errors,
        warnings: this.warnings
      };
    };

    ChartParser.prototype._addMessage = function(list, message) {
      return list.push({
        message: message,
        offset: this.offset - this.tokenLength,
        line: this.line + 1,
        column: ((this.offset - this.tokenLength) - this.lineStart) + 1,
        length: this.tokenLength
      });
    };

    ChartParser.prototype._eatWhitespace = function() {
      var _results;
      this.tokenLength = 0;
      _results = [];
      while (this.text[this.offset] && /[ \t\r]/.test(this.text[this.offset])) {
        _results.push(this.offset++);
      }
      return _results;
    };

    ChartParser.prototype._parseAction = function() {
      var action, match, number, start, text, _ref;
      this._eatWhitespace();
      start = this.offset;
      this.tokenLength = 0;
      while (this.text[this.offset] && !/[, \t\r\n]/.test(this.text[this.offset])) {
        ++this.offset;
        ++this.tokenLength;
      }
      if (this.tokenLength === 0) {
        if ((!this.text[this.offset]) || /\r\n/.test(this.text[this.offset])) {
          return null;
        } else {
          this._addMessage(this.warnings, "Missing action.");
          return null;
        }
      }
      text = this.text.slice(start, (start + this.tokenLength - 1) + 1 || 9e9);
      action = {
        action: text,
        width: 1,
        textOffset: this.offset - this.tokenLength,
        textLength: this.tokenLength
      };
      _ref = /^(.*[^0-9])([0-9]*)$/.exec(text), match = _ref[0], text = _ref[1], number = _ref[2];
      action.action = text;
      if (number) {
        action.repetitions = number;
      }
      if (this.library[text]) {
        action = _.extend({}, this.library[text], action);
      } else {
        this._addMessage(this.errors, "Unknown action type: \"" + text + "\".");
        action.action = "error";
        action.width = 1;
      }
      return action;
    };

    ChartParser.prototype._parseRow = function() {
      var action, row, start, token;
      row = [];
      this._eatWhitespace();
      if ((!this.text[this.offset]) || this.text[this.offset] === "\n") {
        return row;
      }
      action = this._parseAction();
      if (action) {
        row.push(action);
      }
      this._eatWhitespace();
      while (!((!this.text[this.offset]) || this.text[this.offset] === "\n")) {
        if (this.text[this.offset] === ",") {
          ++this.offset;
          action = this._parseAction();
          if (action) {
            row.push(action);
          }
          this._eatWhitespace();
        } else {
          start = this.offset;
          while (!((!this.text[this.offset]) || /[, \t\r\n]/.test(this.text[this.offset]))) {
            ++this.offset;
            ++this.tokenLength;
          }
          token = this.text.slice(start, (start + this.tokenLength - 1) + 1 || 9e9);
          this._addMessage(this.errors, "Stray text: \"" + token + "\".");
        }
      }
      return row;
    };

    ChartParser.prototype._parseChart = function() {
      var chart;
      this._eatWhitespace();
      chart = [];
      while (this.text[this.offset] && this.text[this.offset] === "\n") {
        ++this.offset;
        this._eatWhitespace();
      }
      if (!this.text[this.offset]) {
        return chart;
      }
      chart.push(this._parseRow());
      this._eatWhitespace();
      while (this.text[this.offset]) {
        if (this.text[this.offset] === "\n") {
          ++this.offset;
          ++this.line;
          this.lineStart = this.offset;
          this._eatWhitespace();
          if (!this.text[this.offset]) {
            return chart;
          }
          chart.push(this._parseRow());
          this._eatWhitespace();
        } else {
          this._addMessage(this.errors, "Stray text after row.");
          ++this.offset;
        }
      }
      return chart;
    };

    return ChartParser;

  })();

  Pattern = (function(_super) {

    __extends(Pattern, _super);

    function Pattern() {
      return Pattern.__super__.constructor.apply(this, arguments);
    }

    Pattern.prototype.className = "Pattern";

    return Pattern;

  })(Parse.Object);

  NotificationView = (function(_super) {

    __extends(NotificationView, _super);

    function NotificationView() {
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return NotificationView.__super__.constructor.apply(this, arguments);
    }

    NotificationView.prototype.className = "success";

    NotificationView.prototype.initialize = function() {
      return this.render();
    };

    NotificationView.prototype.render = function() {
      var _ref,
        _this = this;
      $(this.el).html((_ref = this.options.message) != null ? _ref : "Success!");
      $(this.el).hide();
      $("#notification").html(this.el);
      $(this.el).slideDown();
      $.doTimeout(5000, function() {
        $(_this.el).slideUp();
        return $.doTimeout(2000, function() {
          return $(_this.el).remove();
        });
      });
      return this.delegateEvents();
    };

    return NotificationView;

  })(Parse.View);

  ErrorView = (function(_super) {

    __extends(ErrorView, _super);

    function ErrorView() {
      return ErrorView.__super__.constructor.apply(this, arguments);
    }

    ErrorView.prototype.className = "error";

    return ErrorView;

  })(NotificationView);

  PatternEditView = (function(_super) {

    __extends(PatternEditView, _super);

    function PatternEditView() {
      this.render = __bind(this.render, this);

      this.update = __bind(this.update, this);

      this.save = __bind(this.save, this);

      this.initialize = __bind(this.initialize, this);
      return PatternEditView.__super__.constructor.apply(this, arguments);
    }

    PatternEditView.prototype.events = {
      "submit form": "save",
      "keypress textarea": "update"
    };

    PatternEditView.prototype.initialize = function() {
      this.model.bind("change", this.render);
      return this.render();
    };

    PatternEditView.prototype.save = function() {
      var _this = this;
      this.model.save({
        title: this.$('[name=title]').val(),
        text: this.$('[name=text]').val()
      }, {
        success: function() {
          new NotificationView({
            message: "Saved!"
          });
          return Backbone.history.navigate("pattern/" + _this.model.id);
        },
        error: function() {
          return new ErrorView({
            message: "Unable to save."
          });
        }
      });
      return false;
    };

    PatternEditView.prototype.update = function() {
      var chart, library, parser, text;
      text = this.$('[name=text]').val();
      library = {
        p: {
          width: 1
        },
        k3tog: {
          width: 3
        }
      };
      parser = new ChartParser();
      chart = parser.parse(text, library);
      return console.warn(chart);
    };

    PatternEditView.prototype.render = function() {
      var template;
      template = $("#pattern-template").html();
      $(this.el).html(_.template(template)({
        model: this.model
      }));
      $("#app").html(this.el);
      this.$("[name=title]").val(this.model.get("title"));
      this.$("[name=text]").val(this.model.get("text"));
      return this.delegateEvents();
    };

    return PatternEditView;

  })(Parse.View);

  PatternListView = (function(_super) {

    __extends(PatternListView, _super);

    function PatternListView() {
      this.render = __bind(this.render, this);

      this.initialize = __bind(this.initialize, this);
      return PatternListView.__super__.constructor.apply(this, arguments);
    }

    PatternListView.prototype.initialize = function() {
      this.start = this.options.start;
      return this.render();
    };

    PatternListView.prototype.render = function() {
      var template;
      template = $("#pattern-list-template").html();
      $(this.el).html(_.template(template)({
        collection: this.collection.first(10),
        start: this.start,
        previous: this.start - 10,
        next: this.collection.size() > 10 ? this.start + 10 : 0
      }));
      $("#app").html(this.el);
      return this.delegateEvents();
    };

    return PatternListView;

  })(Parse.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      this.listPatterns = __bind(this.listPatterns, this);

      this.editPattern = __bind(this.editPattern, this);

      this.newPattern = __bind(this.newPattern, this);
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.routes = {
      "": "listPatterns",
      "new": "newPattern",
      "pattern/:id": "editPattern",
      "patterns/:start": "listPatterns"
    };

    Router.prototype.newPattern = function() {
      return new PatternEditView({
        model: new Pattern()
      });
    };

    Router.prototype.editPattern = function(id) {
      var pattern,
        _this = this;
      pattern = new Pattern({
        objectId: id
      });
      return pattern.fetch({
        success: function() {
          return new PatternEditView({
            model: pattern
          });
        },
        error: function(pattern, error) {
          new Error({
            message: "Count not find the pattern."
          });
          return window.location.hash = "#";
        }
      });
    };

    Router.prototype.listPatterns = function(start) {
      var patterns, query,
        _this = this;
      if (start == null) {
        start = 0;
      }
      query = new Parse.Query(Pattern);
      query.descending("updatedAt", "createdAt").skip(start).limit(11);
      patterns = query.collection();
      return patterns.fetch({
        success: function() {
          return new PatternListView({
            collection: patterns,
            start: parseInt(start)
          });
        },
        error: function(patterns, error) {
          return new Error({
            message: "Unable to load patterns."
          });
        }
      });
    };

    return Router;

  })(Backbone.Router);

  Knitplot = {
    init: function() {
      Parse.initialize("732uFxOqiBozGHcv6BUyEZrpQC0oIbmTbi4UJuK2", "JB48tpHfZ39NTwrRuQIoqq7GQzpdxLonrjpsj67L");
      new Router();
      return Backbone.history.start();
    }
  };

  window.App = Knitplot;

}).call(this);
